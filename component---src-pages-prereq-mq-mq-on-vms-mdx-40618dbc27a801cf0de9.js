"use strict";(self.webpackChunkcuram_kubernetes=self.webpackChunkcuram_kubernetes||[]).push([[7819],{3499:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return s},default:function(){return c}});var l=a(45),r=(a(6540),a(5680)),m=a(4330);const t=["components"],s={},o=(u="InlineNotification",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var u;const g={_frontmatter:s},p=m.A;function c(e){let{components:n}=e,a=(0,l.A)(e,t);return(0,r.yg)(p,Object.assign({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"CÃºram also supports ",(0,r.yg)("strong",{parentName:"p"},"IBM MQ LTS on a VM")," , when running on outside of openshift. The following steps outline how to do this. In this runbook we will outline the steps to create:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-queues"},"Queues")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-listeners"},"Listeners")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-channels"},"Channels")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-topic-objects"},"Topics"))),(0,r.yg)(o,{mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," The MQ version for this runbook verification is  9.3.5 LTS.")),(0,r.yg)("p",null,"For the runbook, two standalone VMs were used as MQ nodes."),(0,r.yg)("h3",null,"Queue manager names"),(0,r.yg)("p",null,"For runbook configuration, the following naming conversion was used throughout the MQ setup: ",(0,r.yg)("inlineCode",{parentName:"p"},"NamingConvention_AppName"),". This must be unique, but ensure you change the commands used on this page accordingly."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Queue Name:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"curam_qm")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Channel Name:")," This value should be all capitals"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"CHL_NamingConvention_AppName")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"CHL_CURAM_QM")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Listeners Name:")," This value should be all capitals"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"LS_NamingConvention_AppName")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"LS_CURAM_QM")),(0,r.yg)("h2",null,"MQ stages"),(0,r.yg)("p",null,"On both MQ nodes run the following command as root:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"su - mqm # Changing user into mqm\nexport PATH=/opt/mqm/inst1/bin:$PATH\n")),(0,r.yg)(o,{kind:"warning",mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Important!")),(0,r.yg)("p",null,"Run the export PATH command on both MQ nodes, this command will be used in further commands in the runbook.")),(0,r.yg)("h2",null,"Shared storage"),(0,r.yg)("p",null,"Create the shared storage for our nodes."),(0,r.yg)(o,{mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," Run the commands as root.")),(0,r.yg)("p",null,"On the shared node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"mkdir -p /MQHA/logs\nmkdir -p /MQHA/qmgrs\nmkdir -p /MQHA/scratch\nuseradd mqha -s /sbin/nologin\nchown -R mqha:mqha /MQHA/*\n")),(0,r.yg)("p",null,"Verify that the UID and GUID match the owner ID by running the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'echo "/MQHA  MQ.FQDN(rw,sync,no_wdelay,fsid=0,anonuid=1001,anongid=1001)" >> /etc/exports\n')),(0,r.yg)("p",null,"Start and enable both the nfs service and rpcbind service by running the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"systemctl start nfs-server.service\nsystemctl enable nfs-server.service\nsystemctl start rpcbind\nsystemctl enable rpcbind\n")),(0,r.yg)("p",null,"On MQ nodes run the following commands:"),(0,r.yg)(o,{mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," Commands to be run as root.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'echo "SHAREDNODEADDRESS:/MQHA  /MQHA  nfs  defaults  0 0" >> /etc/fstab\nsystemctl start rpcbind\nsystemctl enable rpcbind\nmkdir -p /MQHA\nchmod 1777 /MQHA #Check permissions\nmount /MQHA\n')),(0,r.yg)("h2",null,"Create QMs"),(0,r.yg)("p",null,"When creating the queue, start on the secondary node first then move to the primary node."),(0,r.yg)("p",null,"On the secondary MQ node, run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"crtmqm -ld /MQHA/logs -md /MQHA/qmgrs curam_qm\ndspmqinf -o command curam_qm\n")),(0,r.yg)("p",null,"Save the output of the ",(0,r.yg)("inlineCode",{parentName:"p"},"dspmqinf -o command curam_qm")," command, it should look like the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"addmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\n")),(0,r.yg)("p",null,"Wait for /MQHA/qmgrs/curam_qm/qm.ini to appear on other node"),(0,r.yg)("p",null,"On the primary MQ node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"addmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\nstrmqm -x curam_qm\n")),(0,r.yg)("p",null,"On the secondary MQ node run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"strmqm -x curam_qm\n")),(0,r.yg)("h2",null,"Create queues"),(0,r.yg)("p",null,"On the primary MQ node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"runmqsc curam_qm <<-EOS\nDEFINE QLOCAL(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWENACTMENT) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWACTIVITY) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPENACTMENT) BOTHRESH(5) BOQNAME(QN.DPERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nALTER QMGR CHLAUTH(DISABLED)\nALTER QMGR DEADQ(QN.CURAMDEADMESSAGEQUEUE)\nEOS\n")),(0,r.yg)("h2",null,"Create listeners"),(0,r.yg)("p",null,"On the primary MQ node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"runmqsc curam_qm <<-EOS\nDEFINE LISTENER (LS_CURAM_QM) TRPTYPE (TCP) CONTROL (QMGR) PORT (1414)\nSTART LISTENER (LS_CURAM_QM)\nEOS\n")),(0,r.yg)("h2",null,"Create channels"),(0,r.yg)("p",null,"On the primary MQ node run the following command:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Enter your MQ node names into the following commands:")),(0,r.yg)(o,{mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," CERTLABL expects the value to be lower case ibmwebspheremq + Queue Name\nFor this example it will be ibmwebspheremqcuram_qm")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"runmqsc curam_qm <<-EOS\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(SVRCONN)  TRPTYPE(TCP) MCAUSER('mqm') SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256)  CERTLABL ('ibmwebspheremqcuram_qm') SSLCAUTH (OPTIONAL) REPLACE\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME('Node1(1414),Node2(1414)') QMNAME(curam_qm) SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256) CERTLABL ('ibmwebspheremqcuram_qm') REPLACE\nEOS\n")),(0,r.yg)("h2",null,"Create topics"),(0,r.yg)("p",null,"On the primary MQ node run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"runmqsc curam_qm <<-EOS\nDEFINE TOPIC (CURAMCACHEINVALIDATIONTOPIC) TOPICSTR (CURAMCACHEINVALIDATIONTOPIC)\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nEOS\n")),(0,r.yg)("h2",null,"Configure security"),(0,r.yg)("p",null,"The configuration of security is in four parts"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Setting the object type."),(0,r.yg)("li",{parentName:"ul"},"Creating the keystore and certs."),(0,r.yg)("li",{parentName:"ul"},"Updating the certs on both nodes."),(0,r.yg)("li",{parentName:"ul"},"Refreshing security settings.")),(0,r.yg)(o,{mdxType:"InlineNotification"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")),(0,r.yg)("p",null,"The application pods must connect to MQ using a non-privileged account. The example commands use ",(0,r.yg)("inlineCode",{parentName:"p"},"mqclient")," as the non-privileged account.\nThis username must be set in the secret referenced by the ",(0,r.yg)("inlineCode",{parentName:"p"},"global.mq.queueManager.secret.name")," property. See the ",(0,r.yg)("a",{parentName:"p",href:"/curam-kubernetes/deployment/secrets"},"Handling Secrets")," page for more information.")),(0,r.yg)("p",null,"On the secondary MQ node run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"useradd -g 0 -M mqclient && usermod -L mqclient\n")),(0,r.yg)("p",null,"On the primary MQ node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"useradd -g 0 -M mqclient && usermod -L mqclient\nrunmqsc curam_qm <<-EOS\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWACTIVITY') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.CURAMDEADMESSAGEQUEUE') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(LISTENER) PROFILE('LS_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CHANNEL) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CLNTCONN) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(TOPIC) PROFILE('CURAMCACHEINVALIDATIONTOPIC') PRINCIPAL('mqclient') AUTHADD(ALL)\nEOS\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'runmqckm -keydb -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -type cms -pw Passw0rd -stash\nrunmqakm -cert -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -size 2048 -dn "CN=curam_qm,O=IBM,C=US" -x509version 3 -expire 365 -sig_alg SHA256WithRSA\nrunmqakm -cert -extract -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.arm\nrunmqakm -cert -export -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -target_type pkcs12 -target_pw Passw0rd\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"openssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.key\nopenssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.crt\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"runmqsc curam_qm <<-EOS\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\nREFRESH SECURITY TYPE(CONNAUTH)\nEOS\n")),(0,r.yg)("p",null,"After these stages have been run MQ should be configured."),(0,r.yg)("h2",null,"Clean up QMs/channels/listeners"),(0,r.yg)("p",null,"Used these steps if you are reconfiguring MQ or cleaning up MQ."),(0,r.yg)("p",null,"On both MQ nodes run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"endmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n")),(0,r.yg)("p",null,"On either MQ node run the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"rm -rf /MQHA/qmgrs/**\nrm -rf /MQHA/logs/**\nrm -rf /MQHA/scratch\nendmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-prereq-mq-mq-on-vms-mdx-40618dbc27a801cf0de9.js.map