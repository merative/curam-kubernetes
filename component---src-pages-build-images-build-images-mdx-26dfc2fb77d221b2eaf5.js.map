{"version":3,"file":"component---src-pages-build-images-build-images-mdx-26dfc2fb77d221b2eaf5.js","mappings":"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","sources":["webpack://curam-kubernetes/./src/pages/build-images/build_images.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/curam-kubernetes/curam-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Introduction`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n      <p>{`For more information, see:`}<br />{` `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image\"\n        }}>{`RedHat Universal Base Image`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/\"\n        }}>{`Red Hat Universal base image how it works`}</a></p>\n    </InlineNotification>\n    <p>{`Some of the base images require `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/terms-based-registry\"\n      }}>{`authentication`}</a>{` with the RedHat Container Registry.\nYou must be logged in to the following registries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.redhat.io`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.redhat.io/rhel8/httpd-24`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.redhat.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.connect.redhat.com`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.connect.redhat.com`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`docker`}</inlineCode>{` commands that follow you must set a `}<inlineCode parentName=\"p\">{`DOCKER_REGISTRY`}</inlineCode>{` environment variable based on the container environment you are deploying:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"CRC\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`The URL for this value can be retrieved using this command: `}<inlineCode parentName=\"p\">{`oc registry info --public`}</inlineCode></p>\n            <p>{`For example:`}</p>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export DOCKER_REGISTRY=default-route-openshift-image-registry.apps-crc.testing\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Minikube Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export DOCKER_REGISTRY=minikube.local:5000\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Minikube Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <InlineNotification mdxType=\"InlineNotification\">\n              <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` For Minikube on Windows set `}<inlineCode parentName=\"p\">{`DOCKER_REGISTRY`}</inlineCode>{` to the value: `}<inlineCode parentName=\"p\">{`localhost:5000`}</inlineCode>{`.\nSee the `}<a parentName=\"p\" {...{\n                  \"href\": \"https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows\"\n                }}>{`Minikube Handbook`}</a>{` for more information.`}</p>\n            </InlineNotification>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`\\`$env:DOCKER_REGISTRY = \"localhost:5000\"\\`\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Now that all the elements are in place, build the images as follows:`}</p>\n    <h2>{`Building the images`}</h2>\n    <p>{`The following sections provide steps for building the Docker images.`}</p>\n    <p>{`Set the `}<inlineCode parentName=\"p\">{`PROJECT`}</inlineCode>{` environment variable:`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` In the following commands, the value of `}<inlineCode parentName=\"p\">{`$PROJECT`}</inlineCode>{` will change depending on deployment type:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`For a Minikube deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` is arbitrary.`}</li>\n        <li parentName=\"ul\">{`For an AKS deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid namespace in the customer’s account.`}</li>\n        <li parentName=\"ul\">{`For an OpenShift deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` in `}<a parentName=\"li\" {...{\n            \"href\": \"/curam-kubernetes/prereq/openshift/codeready-containers#creating-a-crc-project\"\n          }}>{`Creating a CRC project`}</a></li>\n      </ul>\n    </InlineNotification>\n    <h3>{`XML server image`}</h3>\n    <p>{`To build the XML server image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/xmlserver:latest \\`\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\`\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://img.shields.io/badge/-C%C3%BAram_8.0.1.0-green\",\n        \"alt\": \"Cúram 8.0.1.0\"\n      }}></img>{` For information on building an XML server sidecar performance monitoring image see `}<a parentName=\"p\" {...{\n        \"href\": \"/curam-kubernetes/monitoring/xmlserver-monitoring\"\n      }}>{`Monitoring XML servers`}</a>{`.`}</p>\n    <h3>{`Utilities image`}</h3>\n    <p>{`The utilities image is used at various stages of the deployment to check the state of the deployment.`}</p>\n    <p>{`To build the utilities image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\$env:Java_Version\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/utilities:latest \\`\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\`\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Batch image`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`.dockerignore`}</inlineCode>{` file is used to omit the EAR files from the build context for batch.`}</p>\n    <p>{`To build the batch image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\$env:Java_Version\\\\\necho \"content/release-stage/ear\" | set-content .dockerignore -Encoding Ascii\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/batch:latest \\`\n     --file Batch.Dockerfile .\ndel  .dockerignore\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Server Code image`}</h3>\n    <p>{`To build the Server Code image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\\\n     --file ServerEAR.Dockerfile \\\\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows PS\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\$env:Java_Version\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest \\`\n     --file ServerEAR.Dockerfile \\`\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Application images`}</h3>\n    <p>{`Take note of the `}<inlineCode parentName=\"p\">{`SERVERCODE_IMAGE`}</inlineCode>{` build argument which references the server code image - this gives the images a common base.`}</p>\n    <p>{`To build the application images, run the following commands for each of the applications (EAR files) needed:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Curam EAR (Mac/Linux)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Curam EAR (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\Liberty\\\\$env:Java_Version\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/curam:latest \\`\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs (Mac/Linux)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional Cúram applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`docker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional Cúram applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`docker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/rest:latest \\`\n     --file ClientEAR.Dockerfile \\`\n     --build-arg \"SERVERCODE_IMAGE=$env:DOCKER_REGISTRY/$env:PROJECT/servercode:latest\" \\`\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h3>{`Static Content image`}</h3>\n    <p>{`To build the static content image, run the following commands:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/httpd:latest \\`\n     --file StaticContent.Dockerfile \\`\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\`\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value set in `}<inlineCode parentName=\"p\">{`curam-config.xml`}</inlineCode>{` when the webclient was built.`}</p>\n    </InlineNotification>\n    <h3>{`Universal Access image`}</h3>\n    <p>{`To build an Cúram Docker image for your `}<em parentName=\"p\">{`built`}</em>{` Universal Access application:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`build`}</inlineCode>{` directory from the React application to `}<inlineCode parentName=\"li\">{`$SPM_HOME/dockerfiles/HTTPServer`}</inlineCode></li>\n      <li parentName=\"ul\">{`Run the following commands:`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This is applicable only if you are licensed for Cúram Universal Access.`}</p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value of the `}<inlineCode parentName=\"p\">{`PUBLIC_URL`}</inlineCode>{` variable set when creating the production build of the React app (`}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{`).`}</p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Using RedHat Registry (Windows PS)\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`cd $env:SPM_HOME\\\\dockerfiles\\\\HTTPServer\\\\\ndocker build \\`\n     --tag $env:DOCKER_REGISTRY/$env:PROJECT/uawebapp:latest \\`\n     --file UAWebApp.Dockerfile \\`\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\`\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h2>{`Pushing the images to the registry`}</h2>\n    <p>{`A Container Registry is a repository or service for storing and distributing containers that can be used with Kubernetes. Most Cloud providers offer container registries but there are third party options such as JFrog Artifactory available also. If using Minikube a registry was created during setup to store the Docker images locally. Depending on the registry of choice, the commands to push generally use the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If any additional images were built (for other Cúram applications or for the React application), do not forget to push the images too. For example:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n`}</code></pre>\n    </InlineNotification>\n    <h2>{`View the artifacts in the repository`}</h2>\n    <p>{`Confirm that the pushes to the Docker registry succeeded. Run the following command:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Minikube\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl http://$DOCKER_REGISTRY/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"CRC\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`The command returns the following result, depending on the images built and your tagging:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\", \"servercode\"]}\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Due to an issue with `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/kubernetes/minikube/issues/2365\"\n        }}>{`Minikube`}</a>{` you will need to repush the Docker images to the registry\neach time you shut down.`}</p>\n    </InlineNotification>\n    <p>{`For more information about the Docker Registry HTTP API, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/spec/api/\"\n      }}>{`Docker Registry HTTP API V2`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","label","isMDXComponent"],"sourceRoot":""}