{"componentChunkName":"component---src-pages-monitoring-interrogate-runtime-mdx","path":"/monitoring/interrogate_runtime/","result":{"pageContext":{"frontmatter":{"title":"Monitoring the status of the Kubernetes cluster","description":"Monitoring the status of the Kubernetes cluster"},"relativePagePath":"/monitoring/interrogate_runtime.mdx","titleType":"page","MdxNode":{"id":"0d742a2a-4616-52a4-be10-4a9202d96d91","children":[],"parent":"4104dd86-dc32-5edb-b069-b3d12897ea4e","internal":{"content":"---\ntitle: Monitoring the status of the Kubernetes cluster\ndescription: Monitoring the status of the Kubernetes cluster\n---\n\nYou can interrogate a Kubernetes system to debug or verify its status in the following ways:\n\n* View the Minikube dashboard or the CodeReady Containers console\n* View pod status and logs\n* Log in to a pod to investigate its status\n* Modify a Kubernetes object\n\n## Minikube dashboard\n\nThe dashboard add-on is enabled by default in Minikube and is used to verify the health of the system.\nBecause Minikube is a minimal environment, the dashboard add-on doesn't have the full capability of the dashboard in a fully deployed Kubernetes cluster. However, the dashboard shows the most important data.\n\nUse the dashboard to list the Kubernetes objects, including the status and names of the pods, and more information such as how long the pods are running.\n\nStart the dashboard by running the following command:\n\n```shell\n# Minikube Dashboard\nminikube dashboard\n```\n\nFigure 1 shows an example of the Minikube dashboard:\n\n![Minikube dashboard](../../images/Minikube-dashboard.png)\n<Caption>\n\n*Figure 1:* Minikube dashboard:\n\n</Caption>\n\n## CodeReady Containers Console\n\nThe console is a user interface accessible from a web browser. Developers can use the web console to visualize, browse, and manage the contents of projects.\n\nLaunch the console by running the following command:\n\n```shell\n# CodeReady Containers Consoles\ncrc console\n```\n\nTo view the credentials for `kube:admin` or `developer` run the following command:\n\n```shell\ncrc console --credentials\n```\n\nFigure 2 shows an example of the CodeReady Containers console:\n\n![CodeReady Container console](../../images/crc_console.png)\n<Caption>\n\n*Figure 2:* CodeReady Containers console:\n\n</Caption>\n\n## Pods status and logs\n\nAll Kubernetes objects can also be accessed by running the `kubectl` command-line tool. To list the objects, run the `kubectl get` command followed by the types of object to retrieve, for example: pods, services, cron jobs, or other objects.\nA useful option is the `-w` (watch) option. The watch option keeps the command in a pending state, showing how the pods change over time. It also follows the pods through the initialization, waiting, and running phases.\n\nAn example of `kubectl` is as follows:\n\n```shell\nkubectl get pods -w\n```\n\nThis command lists the names of all the pods and their status.\n\nWhen a pod is running, you can read the log of that pod by running the following command:\n\n```shell\nkubectl logs pod-name\n```\n\nWhere `pod-name` is the name of the pod you want to query. The `kubectl logs` command behaves in the same way as the Docker® `logs` command, so you can use the `-f` option to leave the command open and show the log updating in real time.\n\nWhen the pod is not running but is in another state such as pending, initializing, or failed, you can `describe` it for debugging purposes if there is a problem.\n\nRun `describe` on any Kubernetes object to show its configuration, for example:\n\n```shell\nkubectl describe pod/pod-name\n```\n\n## Log in to a pod\n\nLike any other Docker container when a pod is in running status, you can log in to it to conduct a more detailed investigation.\nThe commands that you use depend on the pod, but the following command should work because `bash` is generally available:\n\n```shell\nkubectl exec -ti pod-name bash\n```\n\nThe command opens a `bash` session within the pod.\n\n## Modify a Kubernetes object\n\nYou can also modify Kubernetes objects at run time by running the `edit` command. Use this command carefully because it might modify the health of the system.\nFor example, to modify a deployment object called `deploymentname`, run the following command:\n\n```shell\nkubectl edit deployment/deploymentname\n```\n\nThe configuration opens in the default editor, but you can specify a different editor by setting the `KUBE_EDITOR` environment variable.\n","type":"Mdx","contentDigest":"4b68d1a0ccd8cd3358c431ceeaf43b91","owner":"gatsby-plugin-mdx","counter":181},"frontmatter":{"title":"Monitoring the status of the Kubernetes cluster","description":"Monitoring the status of the Kubernetes cluster"},"exports":{},"rawBody":"---\ntitle: Monitoring the status of the Kubernetes cluster\ndescription: Monitoring the status of the Kubernetes cluster\n---\n\nYou can interrogate a Kubernetes system to debug or verify its status in the following ways:\n\n* View the Minikube dashboard or the CodeReady Containers console\n* View pod status and logs\n* Log in to a pod to investigate its status\n* Modify a Kubernetes object\n\n## Minikube dashboard\n\nThe dashboard add-on is enabled by default in Minikube and is used to verify the health of the system.\nBecause Minikube is a minimal environment, the dashboard add-on doesn't have the full capability of the dashboard in a fully deployed Kubernetes cluster. However, the dashboard shows the most important data.\n\nUse the dashboard to list the Kubernetes objects, including the status and names of the pods, and more information such as how long the pods are running.\n\nStart the dashboard by running the following command:\n\n```shell\n# Minikube Dashboard\nminikube dashboard\n```\n\nFigure 1 shows an example of the Minikube dashboard:\n\n![Minikube dashboard](../../images/Minikube-dashboard.png)\n<Caption>\n\n*Figure 1:* Minikube dashboard:\n\n</Caption>\n\n## CodeReady Containers Console\n\nThe console is a user interface accessible from a web browser. Developers can use the web console to visualize, browse, and manage the contents of projects.\n\nLaunch the console by running the following command:\n\n```shell\n# CodeReady Containers Consoles\ncrc console\n```\n\nTo view the credentials for `kube:admin` or `developer` run the following command:\n\n```shell\ncrc console --credentials\n```\n\nFigure 2 shows an example of the CodeReady Containers console:\n\n![CodeReady Container console](../../images/crc_console.png)\n<Caption>\n\n*Figure 2:* CodeReady Containers console:\n\n</Caption>\n\n## Pods status and logs\n\nAll Kubernetes objects can also be accessed by running the `kubectl` command-line tool. To list the objects, run the `kubectl get` command followed by the types of object to retrieve, for example: pods, services, cron jobs, or other objects.\nA useful option is the `-w` (watch) option. The watch option keeps the command in a pending state, showing how the pods change over time. It also follows the pods through the initialization, waiting, and running phases.\n\nAn example of `kubectl` is as follows:\n\n```shell\nkubectl get pods -w\n```\n\nThis command lists the names of all the pods and their status.\n\nWhen a pod is running, you can read the log of that pod by running the following command:\n\n```shell\nkubectl logs pod-name\n```\n\nWhere `pod-name` is the name of the pod you want to query. The `kubectl logs` command behaves in the same way as the Docker® `logs` command, so you can use the `-f` option to leave the command open and show the log updating in real time.\n\nWhen the pod is not running but is in another state such as pending, initializing, or failed, you can `describe` it for debugging purposes if there is a problem.\n\nRun `describe` on any Kubernetes object to show its configuration, for example:\n\n```shell\nkubectl describe pod/pod-name\n```\n\n## Log in to a pod\n\nLike any other Docker container when a pod is in running status, you can log in to it to conduct a more detailed investigation.\nThe commands that you use depend on the pod, but the following command should work because `bash` is generally available:\n\n```shell\nkubectl exec -ti pod-name bash\n```\n\nThe command opens a `bash` session within the pod.\n\n## Modify a Kubernetes object\n\nYou can also modify Kubernetes objects at run time by running the `edit` command. Use this command carefully because it might modify the health of the system.\nFor example, to modify a deployment object called `deploymentname`, run the following command:\n\n```shell\nkubectl edit deployment/deploymentname\n```\n\nThe configuration opens in the default editor, but you can specify a different editor by setting the `KUBE_EDITOR` environment variable.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/monitoring/interrogate_runtime.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}