{"componentChunkName":"component---src-pages-troubleshooting-xmlserver-trace-mdx","path":"/troubleshooting/xmlserver-trace/","result":{"pageContext":{"frontmatter":{"title":"XML Server Tracing","description":"Configuring XML server tracing"},"relativePagePath":"/troubleshooting/xmlserver-trace.mdx","titleType":"page","MdxNode":{"id":"afc10d0f-7054-5f3b-9042-e3b9544e6000","children":[],"parent":"d74b517f-fe18-598b-a19e-a75ce1230c73","internal":{"content":"---\ntitle: XML Server Tracing\ndescription: Configuring XML server tracing\n---\n## Introduction\n\nThis topic describes how to configure XML server tracing when deployed to Kubernetes.\n\nFor more information about XML server tracing, see **Debug configuration** in the *Cúram XML Infrastructure Guide*.\n\n<InlineNotification>\n\nCúram PDF documentation is available to download from [Cúram Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nHowever, to use it in a Kubernetes environment, the following steps will need to be performed:\n\n1. Create a new ConfigMap to override the trace setting in the default `xmlserverconfig.xml.template` file\n2. Optionally (for the `xmlserver` deployment only), a ConfigMap can be created to override its default log4j properties file.\n\nThe Kubernetes commands presented in this topic are generic and assume a helm release name of `releasename`.\nTo enter the commands below as-is, `<name_space>` will need to be substituted with the OpenShift project name or AKS namespace for the deployment:\n\n* For Openshift:\n  * Create an alias for the `oc` command:\n    * Bash: `alias k='oc'`\n    * Windows PowerShell: `Set-Alias -Name k -Value oc`\n  * Set the default namespace:\n    * `k project <name_space>`\n* For AKS:\n  * Create an alias for the `kubectl` command:\n    * Bash: `alias k='kubectl'`\n    * Windows PowerShell: `Set-Alias -Name k -Value kubectl`\n  * Set the default namespace:\n    * `k config set-context --current --namespace=<name_space>`\n\n### Specifying the XML Server Trace Setting\n\nTo enable XML server tracing the out-of-the-box setting needs to be modified as follows:\n\n* Copy the `xmlserver` pod's `xmlserverconfig.xml.template` file to the local file system using the Kubernetes copy command, e.g.\n  `k cp <xmlserver-pod-name>:xmlserverconfig.xml.template xmlserverconfig.xml.template -c xmlserver`\n* Edit the local `xmlserverconfig.xml.template` file to change the `TRACE_TRAFFIC` value as follows:\n  `<TRACE_TRAFFIC>true</TRACE_TRAFFIC>`\n* Delete the existing `releasename-xmlserverconfig-template-cm` ConfigMap. For example:\n  `k delete configmap releasename-xmlserverconfig-template-cm`\n* Create a new `releasename-xmlserverconfig-template-cm` ConfigMap using the edited copy of `xmlserverconfig.xml.template`, e.g.\n  `k create releasename-xmlserverconfig-template-cm --from-file=xmlserverconfig.xml.template`\n  The existing `releasename-xmlserverconfig-template-cm` ConfigMap in the `releasename-xmlserver` deployment will be replaced with the newly edited file.\n* The xmlserver pod(s) must be restarted for the new setting to be used. The pod(s) can be restarted using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap.\n\n### Modifying the Log4j Properties\n\nThe out-of-the-box `log4j2.properties` file will write the XML server trace output to stdout, which is routed to the pod's `tmp/xmlserver.log` file.\nOptionally, a custom log4j properties file can be provided.\nFor instance, it can be useful to modify the output layout to indicate the time-of-day and the worker thread processing the XML server job.\nFor example, this log4j pattern:\n\n```\nappender.A1.layout.pattern=[%p] %d{ABSOLUTE_MICROS} [%t] [%c{1}] %m%n\n```\n\nwill produce output in this format:\n\n```\n[xmlserver] [INFO] 14:01:46,165000 [ThreadPoolWorker-1] [XMLConnectionHandler] - Awaiting job configuration.\n```\n\nas compared to the out-of-the-box format:\n\n```\n[xmlserver] [INFO] [XMLConnectionHandler] Awaiting job configuration.\n```\n\nFor more information on specifying log4j patterns see the [Layouts section](https://logging.apache.org/log4j/2.x/manual/layouts.html) of the [log4j documentation](https://logging.apache.org/log4j/2.x/manual/index.html).\n\nTo modify the `log4j2.properties` file:\n\n* Copy the `xmlserver` pod's `log4j2.properties` file to the local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:/opt/ibm/Curam/xmlserver/log4j2.properties log4j2.properties -c xmlserver`\n* Edit the local file to specify the desired log4j configuration settings.\n* Create a ConfigMap using the edited copy of `log4j2.properties`; for example:\n  `k create configmap xmlserver-log4j-props-cm --from-file=log4j2.properties`\n* Edit the xmlserver deployment to specify the new ConfigMap:\n  `k edit deployment releasename-xmlserver`\n  * In the subsequent edit session add the entries for the new ConfigMap, matching the name used when creating it; for example:\n\n```\n...\n        volumeMounts:\n        ...\n        - mountPath: /opt/ibm/Curam/xmlserver/log4j2.properties\n          name: xmlserver-log4j-props-cm\n          subPath: log4j2.properties\n...\n      volumes:\n      ...\n      - configMap:\n          defaultMode: 420\n          name: xmlserver-log4j-props-cm\n        name: xmlserver-log4j-props-cm\n```\t\t\n\n* The xmlserver pod(s) must be restarted for it to reflect the new trace setting. The pod can be restarted by using the Kubernetes `delete pod` command, e.g.\n  `k delete pod <xmlserver-pod-name>`\n  \nThis will terminate the running pod and start a new pod that reflects the new ConfigMap that contains the log4j properties.\n","type":"Mdx","contentDigest":"9976ba1489970ef4e3a5176aa8287102","owner":"gatsby-plugin-mdx","counter":202},"frontmatter":{"title":"XML Server Tracing","description":"Configuring XML server tracing"},"exports":{},"rawBody":"---\ntitle: XML Server Tracing\ndescription: Configuring XML server tracing\n---\n## Introduction\n\nThis topic describes how to configure XML server tracing when deployed to Kubernetes.\n\nFor more information about XML server tracing, see **Debug configuration** in the *Cúram XML Infrastructure Guide*.\n\n<InlineNotification>\n\nCúram PDF documentation is available to download from [Cúram Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nHowever, to use it in a Kubernetes environment, the following steps will need to be performed:\n\n1. Create a new ConfigMap to override the trace setting in the default `xmlserverconfig.xml.template` file\n2. Optionally (for the `xmlserver` deployment only), a ConfigMap can be created to override its default log4j properties file.\n\nThe Kubernetes commands presented in this topic are generic and assume a helm release name of `releasename`.\nTo enter the commands below as-is, `<name_space>` will need to be substituted with the OpenShift project name or AKS namespace for the deployment:\n\n* For Openshift:\n  * Create an alias for the `oc` command:\n    * Bash: `alias k='oc'`\n    * Windows PowerShell: `Set-Alias -Name k -Value oc`\n  * Set the default namespace:\n    * `k project <name_space>`\n* For AKS:\n  * Create an alias for the `kubectl` command:\n    * Bash: `alias k='kubectl'`\n    * Windows PowerShell: `Set-Alias -Name k -Value kubectl`\n  * Set the default namespace:\n    * `k config set-context --current --namespace=<name_space>`\n\n### Specifying the XML Server Trace Setting\n\nTo enable XML server tracing the out-of-the-box setting needs to be modified as follows:\n\n* Copy the `xmlserver` pod's `xmlserverconfig.xml.template` file to the local file system using the Kubernetes copy command, e.g.\n  `k cp <xmlserver-pod-name>:xmlserverconfig.xml.template xmlserverconfig.xml.template -c xmlserver`\n* Edit the local `xmlserverconfig.xml.template` file to change the `TRACE_TRAFFIC` value as follows:\n  `<TRACE_TRAFFIC>true</TRACE_TRAFFIC>`\n* Delete the existing `releasename-xmlserverconfig-template-cm` ConfigMap. For example:\n  `k delete configmap releasename-xmlserverconfig-template-cm`\n* Create a new `releasename-xmlserverconfig-template-cm` ConfigMap using the edited copy of `xmlserverconfig.xml.template`, e.g.\n  `k create releasename-xmlserverconfig-template-cm --from-file=xmlserverconfig.xml.template`\n  The existing `releasename-xmlserverconfig-template-cm` ConfigMap in the `releasename-xmlserver` deployment will be replaced with the newly edited file.\n* The xmlserver pod(s) must be restarted for the new setting to be used. The pod(s) can be restarted using the Kubernetes `delete pod` command.  For example:\n  `k delete pod <xmlserver-pod-name>`\n  This will terminate the running pod and start a new pod that reflects the new ConfigMap.\n\n### Modifying the Log4j Properties\n\nThe out-of-the-box `log4j2.properties` file will write the XML server trace output to stdout, which is routed to the pod's `tmp/xmlserver.log` file.\nOptionally, a custom log4j properties file can be provided.\nFor instance, it can be useful to modify the output layout to indicate the time-of-day and the worker thread processing the XML server job.\nFor example, this log4j pattern:\n\n```\nappender.A1.layout.pattern=[%p] %d{ABSOLUTE_MICROS} [%t] [%c{1}] %m%n\n```\n\nwill produce output in this format:\n\n```\n[xmlserver] [INFO] 14:01:46,165000 [ThreadPoolWorker-1] [XMLConnectionHandler] - Awaiting job configuration.\n```\n\nas compared to the out-of-the-box format:\n\n```\n[xmlserver] [INFO] [XMLConnectionHandler] Awaiting job configuration.\n```\n\nFor more information on specifying log4j patterns see the [Layouts section](https://logging.apache.org/log4j/2.x/manual/layouts.html) of the [log4j documentation](https://logging.apache.org/log4j/2.x/manual/index.html).\n\nTo modify the `log4j2.properties` file:\n\n* Copy the `xmlserver` pod's `log4j2.properties` file to the local file system using the Kubernetes copy command.  For example:\n  `k cp <xmlserver-pod-name>:/opt/ibm/Curam/xmlserver/log4j2.properties log4j2.properties -c xmlserver`\n* Edit the local file to specify the desired log4j configuration settings.\n* Create a ConfigMap using the edited copy of `log4j2.properties`; for example:\n  `k create configmap xmlserver-log4j-props-cm --from-file=log4j2.properties`\n* Edit the xmlserver deployment to specify the new ConfigMap:\n  `k edit deployment releasename-xmlserver`\n  * In the subsequent edit session add the entries for the new ConfigMap, matching the name used when creating it; for example:\n\n```\n...\n        volumeMounts:\n        ...\n        - mountPath: /opt/ibm/Curam/xmlserver/log4j2.properties\n          name: xmlserver-log4j-props-cm\n          subPath: log4j2.properties\n...\n      volumes:\n      ...\n      - configMap:\n          defaultMode: 420\n          name: xmlserver-log4j-props-cm\n        name: xmlserver-log4j-props-cm\n```\t\t\n\n* The xmlserver pod(s) must be restarted for it to reflect the new trace setting. The pod can be restarted by using the Kubernetes `delete pod` command, e.g.\n  `k delete pod <xmlserver-pod-name>`\n  \nThis will terminate the running pod and start a new pod that reflects the new ConfigMap that contains the log4j properties.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/troubleshooting/xmlserver-trace.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}