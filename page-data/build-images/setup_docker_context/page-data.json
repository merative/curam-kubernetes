{"componentChunkName":"component---src-pages-build-images-setup-docker-context-mdx","path":"/build-images/setup_docker_context/","result":{"pageContext":{"frontmatter":{"title":"Setting up the Docker® context","description":"Setting up the Docker context"},"relativePagePath":"/build-images/setup_docker_context.mdx","titleType":"page","MdxNode":{"id":"b93c97af-a1b8-5dcf-aa14-67a3d1b23867","children":[],"parent":"04c27844-8ccc-531d-830b-3f175d382e14","internal":{"content":"---\ntitle: Setting up the Docker® context\ndescription: Setting up the Docker context\n---\n\n**Note:** Dockerfiles are now separated by folder based on the java version. Please ensure you have the correct `CURAM_JAVA_MODE` environment variable set as described in [Java Requirement](/prereq/3rdparty-sw).\n\nTo build the required Docker images, the context for building them must be established as described in the [Docker build](https://docs.docker.com/engine/reference/commandline/build/) command description.\n\nThe following components provide this context:\n\n* The artifacts that you downloaded by following the steps that are described in [GitHub repo](/prereq/git).\n* The `release.zip` and `StaticContent.zip` files that you built in [Building the Cúram application](/deploy-curam/build-curam).\n\n## Building Cúram resources\n\nSome of the Docker images that you build rely on the `release.zip` and `StaticContent.zip` files that you built in [Building the Cúram application](/deploy-curam/build-curam).\n\nIf you built `release.zip` and `StaticContent.zip` on a different computer to the one where container environment will be deployed, you must transfer the files to the computer you're currently working on.\nFor simplicity, it is assumed that these files are copied to `/tmp/`.\n\n## Preparing the Cúram environment\n\nPrepare the Cúram Docker environment by using the `release.zip` file.\n\nFor the following steps, use the `$SPM_HOME` folder that you created in [GitHub repo](/prereq/git).\n\n1. To create a `release-stage` folder to contain the contents of `release.zip`, run the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nmkdir $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nmkdir $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n1. To extract `release.zip` into the `release-stage` folder, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nunzip -qd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage /tmp/release.zip\nchmod +x $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/*.sh\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nunzip -qd $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage $env:TMP\\release.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n  Where `/tmp/release.zip` (or for Windows: `$env:TMP\\release.zip`) is the absolute path where the `release.zip` is saved.\n\n## Modifying Cúram properties\n\n`Bootstrap.properties` and `AppServer.properties` are required to configure WebSphere® Liberty.\nHowever the relevant properties in `Bootstrap.properties` that you modify in the on-premise implementation of Cúram are no longer relevant because Kubernetes configmaps provide the necessary values for the database configuration.\n\nThe only properties that you must modify in `AppServer.properties` are `security.username` and `security.password`.\nThese properties contain the WebSphere Liberty administrator credentials.\nIf the password is changed, the value must be re-encrypted by running the following commands and updating `AppServer.properties` with the new encrypted password:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\n./build.sh encrypt -Dpassword=<The password to be encrypted>\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows DOS\">\n<Row>\n<Column>\n\n```bat\ncd %SERVER_DIR%\nbuild.bat encrypt -Dpassword=<The password to be encrypted>\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nCopy the property files by using the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\ncp -vf *.properties release-stage/project/properties/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd  $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\\ncopy *.properties .\\release-stage\\project\\properties\\ -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## WebSphere Liberty server configuration\n\nAll configuration of WebSphere Liberty will be handled by the Helm Charts. See the [Preparing Helm Charts](/deployment/hc_preparation) topic for more information.\n\n## Copying static content artifacts\n\nCopy the static content `.zip` file for Docker image creation. Run the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncp -vf /tmp/StaticContent.zip $SPM_HOME/dockerfiles/HTTPServer/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncopy $env:TMP\\StaticContent.zip $env:SPM_HOME\\dockerfiles\\HTTPServer\\ -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Installing external artifacts\n\nIn addition to `release.zip` and `StaticContent.zip`, download and install the following artifacts.\n\n### Add the Ant zip file to the Docker environment\n\nCopy `apache-ant-$ANT_VERSION_VALUE-bin.zip` to `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content`. If Ant is not already available on the computer, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\nwget https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION_VALUE-bin.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\nwget https://archive.apache.org/dist/ant/binaries/apache-ant-$env:ANT_VERSION_VALUE-bin.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### CryptoConfig.jar\n\n`CryptoConfig.jar` is required for Cúram cryptography to function correctly. This jar is automatically created in the following locations when you run the\n `build.sh configtest` target:\n\n* `$SERVER_DIR/build/CryptoConfig.jar`\n* `$JAVA_HOME/jre/lib/ext/CryptoConfig.jar` as a location of the CryptoConfig jar only if  using Java 8\n\nHowever, the `release.zip` does not include this jar file, so the jar file must be copied separately from the environment where the `release.zip` was built.\n\nPlace the `CryptoConfig.jar` file in `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/build`.\n\n<InlineNotification>\n\nPlease see [Setting the Cúram credentials](testLink) for keystore creation.\n\nCryptography keystores for Cúram vary based on the JVM vendor, so the vendor in the build environment must correspond to that used in the Docker images.\n\nFor ModernJava create a new folder `content/release-stage/project/properties/sun`\nFor Java8 create a new folder `content/release-stage/project/properties/ibm`\n\nCopy the keystore from your build environment to the respective folder based on your Java version.\n\n</InlineNotification>\n\nFor convenience, you can use a docker container to create the `CryptoConfig.jar` file.\nNote the use of `$ANT_HOME` environment variable in the following `docker run` command.\nThis value must map to a working copy of Ant on your workstation.\nIf you do not have a copy of Ant locally you can extract it from `$SPM_HOME` using:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nunzip -qd /tmp/ $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/apache-ant-$ANT_VERSION_VALUE-bin.zip\nexport ANT_HOME=/tmp/apache-ant-$ANT_VERSION_VALUE\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nunzip -qd $env:TMP $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\apache-ant-$env:ANT_VERSION_VALUE-bin.zip\n$env:ANT_HOME = \"$env:TMP\\apache-ant-$env:ANT_VERSION_VALUE\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab label=\"Mac/Linux ModernJava\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm \\\n    -v $ANT_HOME:/tmp/ant \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage:/work/dir \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/SetEnvironment.sh:/work/SetEnvironment.sh \\\n    -w /work/dir \\\n    -u root \\\n    -e ANT_HOME=/tmp/ant \\\n    -e WLP_HOME=/opt/ibm/wlp \\\n    ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal \\\n    bash -c 'export ANT_LIB_PATH ; export PATH=$ANT_HOME/bin:$PATH:.; tmp/ant/bin/ant -Dnashorn.args=\"--language=es6\" $ANT_LIB_PATH -f /work/dir/build.xml -Dprp.noninternedstrings=true installcryptojar init_passwords \n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Mac/Linux Java 8\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm \\\n    -v $ANT_HOME:/tmp/ant \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage:/work/dir \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/SetEnvironment.sh:/work/SetEnvironment.sh \\\n    -w /work/dir \\\n    -u root \\\n    -e ANT_HOME=/tmp/ant \\\n    -e WLP_HOME=/opt/ibm/wlp \\\n    ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi \\\n    bash -c 'export PATH=$ANT_HOME/bin:$PATH:.; build.sh internal.update.crypto.jar'\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS ModernJava\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm `\n    -v $env:ANT_HOME\\:/tmp/ant `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\:/work/dir `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\SetEnvironment.sh:/work/SetEnvironment.sh `\n    -w /work/dir `\n    -u root `\n    -e ANT_HOME=/tmp/ant `\n    -e WLP_HOME=/opt/ibm/wlp `\n    ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal `\n    bash -c 'export ANT_LIB_PATH ; export PATH=$ANT_HOME/bin:$PATH:.; tmp/ant/bin/ant -Dnashorn.args=\"--language=es6\" $ANT_LIB_PATH -f /work/dir/build.xml -Dprp.noninternedstrings=true installcryptojar init_passwords \n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS Java 8\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm `\n    -v $env:ANT_HOME\\:/tmp/ant `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\:/work/dir `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\SetEnvironment.sh:/work/SetEnvironment.sh `\n    -w /work/dir `\n    -u root `\n    -e ANT_HOME=/tmp/ant `\n    -e WLP_HOME=/opt/ibm/wlp `\n    ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi `\n    bash -c 'export PATH=$ANT_HOME/bin:$PATH:.; build.sh internal.update.crypto.jar'\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Installing javax.mail.jar and activation.jar files\n\nJava Mail is an external dependency for Cúram and is represented by the JAR files `activation.jar` and `javax.mail.jar`.\nPlace these files in the folder `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/dependencies` (filenames must be exact, that is, have no version numbers).\n\nIf you do not have the jar files available, you can use the `getJavaMail.xml` Ant file that is located in the `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content` folder to download the files:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\n$ANT_HOME/bin/ant -f getJavaMail.xml\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows DOS\">\n<Row>\n<Column>\n\n```bat\ncd $env:ANT_HOME\\bin\n.\\ant.bat -f $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\getJavaMail.xml\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nConfirm the availability of the JAR files by running the following command:\n\n`ls $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/dependencies`\n\n### Downloading IBM MQ Resource Adapter\n\n<InlineNotification>\n\n**Note:** As of Release 25.X.0, the IBM MQ Resource Adapter version used to verify this runbook is 9.3.5.1.\n<p>&nbsp;</p>\nAn IBM MQ Resources Adapter of a supported version level can connect to any IBM MQ Queue Manager of supported version level,\nbut the feature set available will be based on whichever is of the lower level.\nFor more information, see the [related version compatibility documentation](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=cci-compatibility-between-different-versions-mq-mqi-client-queue-manager).\n</InlineNotification>\n\nIBM MQ is required for WebSphere Liberty JMS support, therefore you must install the MQ Resource Adapter.\n\n1. Download the IBM MQ resource adapter from Fix Central.\n   * Click this link:\n   [IBM MQ Resource Adapter](https://www.ibm.com/support/fixcentral/swg/selectFixes?parent=ibm~WebSphere&product=ibm/WebSphere/WebSphere+MQ&release=9.3.5.1&platform=All&function=fixid&fixids=*IBM-MQ-Java-InstallRA*)\n   * Find the resource adapter for your version of IBM MQ in the displayed list of available fixes. For example:\n\n    ```\n    release level: 9.3.5.1-IBM-MQ-Java-InstallRA\n    Continuous Delivery: 9.3.5.1 IBM MQ Resource Adapter for use with Application Servers\n    ```\n\n   * Then click the resource adapter file name and follow the download process.\n\n2. Copy the downloaded file ( `V.R.M.F-IBM-MQ-Java-InstallRA.jar` ) to `$SPM_HOME/dockerfiles/Liberty/content/`.\n","type":"Mdx","contentDigest":"aab4071bf1f4609e3e716ae79027b216","owner":"gatsby-plugin-mdx","counter":172},"frontmatter":{"title":"Setting up the Docker® context","description":"Setting up the Docker context"},"exports":{},"rawBody":"---\ntitle: Setting up the Docker® context\ndescription: Setting up the Docker context\n---\n\n**Note:** Dockerfiles are now separated by folder based on the java version. Please ensure you have the correct `CURAM_JAVA_MODE` environment variable set as described in [Java Requirement](/prereq/3rdparty-sw).\n\nTo build the required Docker images, the context for building them must be established as described in the [Docker build](https://docs.docker.com/engine/reference/commandline/build/) command description.\n\nThe following components provide this context:\n\n* The artifacts that you downloaded by following the steps that are described in [GitHub repo](/prereq/git).\n* The `release.zip` and `StaticContent.zip` files that you built in [Building the Cúram application](/deploy-curam/build-curam).\n\n## Building Cúram resources\n\nSome of the Docker images that you build rely on the `release.zip` and `StaticContent.zip` files that you built in [Building the Cúram application](/deploy-curam/build-curam).\n\nIf you built `release.zip` and `StaticContent.zip` on a different computer to the one where container environment will be deployed, you must transfer the files to the computer you're currently working on.\nFor simplicity, it is assumed that these files are copied to `/tmp/`.\n\n## Preparing the Cúram environment\n\nPrepare the Cúram Docker environment by using the `release.zip` file.\n\nFor the following steps, use the `$SPM_HOME` folder that you created in [GitHub repo](/prereq/git).\n\n1. To create a `release-stage` folder to contain the contents of `release.zip`, run the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nmkdir $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nmkdir $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n1. To extract `release.zip` into the `release-stage` folder, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nunzip -qd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage /tmp/release.zip\nchmod +x $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/*.sh\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nunzip -qd $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage $env:TMP\\release.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n  Where `/tmp/release.zip` (or for Windows: `$env:TMP\\release.zip`) is the absolute path where the `release.zip` is saved.\n\n## Modifying Cúram properties\n\n`Bootstrap.properties` and `AppServer.properties` are required to configure WebSphere® Liberty.\nHowever the relevant properties in `Bootstrap.properties` that you modify in the on-premise implementation of Cúram are no longer relevant because Kubernetes configmaps provide the necessary values for the database configuration.\n\nThe only properties that you must modify in `AppServer.properties` are `security.username` and `security.password`.\nThese properties contain the WebSphere Liberty administrator credentials.\nIf the password is changed, the value must be re-encrypted by running the following commands and updating `AppServer.properties` with the new encrypted password:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\n./build.sh encrypt -Dpassword=<The password to be encrypted>\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows DOS\">\n<Row>\n<Column>\n\n```bat\ncd %SERVER_DIR%\nbuild.bat encrypt -Dpassword=<The password to be encrypted>\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nCopy the property files by using the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\ncp -vf *.properties release-stage/project/properties/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd  $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\\ncopy *.properties .\\release-stage\\project\\properties\\ -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## WebSphere Liberty server configuration\n\nAll configuration of WebSphere Liberty will be handled by the Helm Charts. See the [Preparing Helm Charts](/deployment/hc_preparation) topic for more information.\n\n## Copying static content artifacts\n\nCopy the static content `.zip` file for Docker image creation. Run the following command:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncp -vf /tmp/StaticContent.zip $SPM_HOME/dockerfiles/HTTPServer/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncopy $env:TMP\\StaticContent.zip $env:SPM_HOME\\dockerfiles\\HTTPServer\\ -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Installing external artifacts\n\nIn addition to `release.zip` and `StaticContent.zip`, download and install the following artifacts.\n\n### Add the Ant zip file to the Docker environment\n\nCopy `apache-ant-$ANT_VERSION_VALUE-bin.zip` to `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content`. If Ant is not already available on the computer, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\nwget https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION_VALUE-bin.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ncd $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\nwget https://archive.apache.org/dist/ant/binaries/apache-ant-$env:ANT_VERSION_VALUE-bin.zip\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### CryptoConfig.jar\n\n`CryptoConfig.jar` is required for Cúram cryptography to function correctly. This jar is automatically created in the following locations when you run the\n `build.sh configtest` target:\n\n* `$SERVER_DIR/build/CryptoConfig.jar`\n* `$JAVA_HOME/jre/lib/ext/CryptoConfig.jar` as a location of the CryptoConfig jar only if  using Java 8\n\nHowever, the `release.zip` does not include this jar file, so the jar file must be copied separately from the environment where the `release.zip` was built.\n\nPlace the `CryptoConfig.jar` file in `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/build`.\n\n<InlineNotification>\n\nPlease see [Setting the Cúram credentials](testLink) for keystore creation.\n\nCryptography keystores for Cúram vary based on the JVM vendor, so the vendor in the build environment must correspond to that used in the Docker images.\n\nFor ModernJava create a new folder `content/release-stage/project/properties/sun`\nFor Java8 create a new folder `content/release-stage/project/properties/ibm`\n\nCopy the keystore from your build environment to the respective folder based on your Java version.\n\n</InlineNotification>\n\nFor convenience, you can use a docker container to create the `CryptoConfig.jar` file.\nNote the use of `$ANT_HOME` environment variable in the following `docker run` command.\nThis value must map to a working copy of Ant on your workstation.\nIf you do not have a copy of Ant locally you can extract it from `$SPM_HOME` using:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nunzip -qd /tmp/ $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/apache-ant-$ANT_VERSION_VALUE-bin.zip\nexport ANT_HOME=/tmp/apache-ant-$ANT_VERSION_VALUE\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nunzip -qd $env:TMP $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\apache-ant-$env:ANT_VERSION_VALUE-bin.zip\n$env:ANT_HOME = \"$env:TMP\\apache-ant-$env:ANT_VERSION_VALUE\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab label=\"Mac/Linux ModernJava\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm \\\n    -v $ANT_HOME:/tmp/ant \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage:/work/dir \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/SetEnvironment.sh:/work/SetEnvironment.sh \\\n    -w /work/dir \\\n    -u root \\\n    -e ANT_HOME=/tmp/ant \\\n    -e WLP_HOME=/opt/ibm/wlp \\\n    ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal \\\n    bash -c 'export ANT_LIB_PATH ; export PATH=$ANT_HOME/bin:$PATH:.; tmp/ant/bin/ant -Dnashorn.args=\"--language=es6\" $ANT_LIB_PATH -f /work/dir/build.xml -Dprp.noninternedstrings=true installcryptojar init_passwords \n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Mac/Linux Java 8\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm \\\n    -v $ANT_HOME:/tmp/ant \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage:/work/dir \\\n    -v $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/release-stage/SetEnvironment.sh:/work/SetEnvironment.sh \\\n    -w /work/dir \\\n    -u root \\\n    -e ANT_HOME=/tmp/ant \\\n    -e WLP_HOME=/opt/ibm/wlp \\\n    ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi \\\n    bash -c 'export PATH=$ANT_HOME/bin:$PATH:.; build.sh internal.update.crypto.jar'\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS ModernJava\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm `\n    -v $env:ANT_HOME\\:/tmp/ant `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\:/work/dir `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\SetEnvironment.sh:/work/SetEnvironment.sh `\n    -w /work/dir `\n    -u root `\n    -e ANT_HOME=/tmp/ant `\n    -e WLP_HOME=/opt/ibm/wlp `\n    ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal `\n    bash -c 'export ANT_LIB_PATH ; export PATH=$ANT_HOME/bin:$PATH:.; tmp/ant/bin/ant -Dnashorn.args=\"--language=es6\" $ANT_LIB_PATH -f /work/dir/build.xml -Dprp.noninternedstrings=true installcryptojar init_passwords \n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS Java 8\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm `\n    -v $env:ANT_HOME\\:/tmp/ant `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\:/work/dir `\n    -v $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\release-stage\\SetEnvironment.sh:/work/SetEnvironment.sh `\n    -w /work/dir `\n    -u root `\n    -e ANT_HOME=/tmp/ant `\n    -e WLP_HOME=/opt/ibm/wlp `\n    ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi `\n    bash -c 'export PATH=$ANT_HOME/bin:$PATH:.; build.sh internal.update.crypto.jar'\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Installing javax.mail.jar and activation.jar files\n\nJava Mail is an external dependency for Cúram and is represented by the JAR files `activation.jar` and `javax.mail.jar`.\nPlace these files in the folder `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/dependencies` (filenames must be exact, that is, have no version numbers).\n\nIf you do not have the jar files available, you can use the `getJavaMail.xml` Ant file that is located in the `$SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content` folder to download the files:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content\n$ANT_HOME/bin/ant -f getJavaMail.xml\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows DOS\">\n<Row>\n<Column>\n\n```bat\ncd $env:ANT_HOME\\bin\n.\\ant.bat -f $env:SPM_HOME\\dockerfiles\\Liberty\\$env:Java_Version\\content\\getJavaMail.xml\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nConfirm the availability of the JAR files by running the following command:\n\n`ls $SPM_HOME/dockerfiles/Liberty/$CURAM_JAVA_MODE/content/dependencies`\n\n### Downloading IBM MQ Resource Adapter\n\n<InlineNotification>\n\n**Note:** As of Release 25.X.0, the IBM MQ Resource Adapter version used to verify this runbook is 9.3.5.1.\n<p>&nbsp;</p>\nAn IBM MQ Resources Adapter of a supported version level can connect to any IBM MQ Queue Manager of supported version level,\nbut the feature set available will be based on whichever is of the lower level.\nFor more information, see the [related version compatibility documentation](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=cci-compatibility-between-different-versions-mq-mqi-client-queue-manager).\n</InlineNotification>\n\nIBM MQ is required for WebSphere Liberty JMS support, therefore you must install the MQ Resource Adapter.\n\n1. Download the IBM MQ resource adapter from Fix Central.\n   * Click this link:\n   [IBM MQ Resource Adapter](https://www.ibm.com/support/fixcentral/swg/selectFixes?parent=ibm~WebSphere&product=ibm/WebSphere/WebSphere+MQ&release=9.3.5.1&platform=All&function=fixid&fixids=*IBM-MQ-Java-InstallRA*)\n   * Find the resource adapter for your version of IBM MQ in the displayed list of available fixes. For example:\n\n    ```\n    release level: 9.3.5.1-IBM-MQ-Java-InstallRA\n    Continuous Delivery: 9.3.5.1 IBM MQ Resource Adapter for use with Application Servers\n    ```\n\n   * Then click the resource adapter file name and follow the download process.\n\n2. Copy the downloaded file ( `V.R.M.F-IBM-MQ-Java-InstallRA.jar` ) to `$SPM_HOME/dockerfiles/Liberty/content/`.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/build-images/setup_docker_context.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}