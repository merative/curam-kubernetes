{"componentChunkName":"component---src-pages-deployment-hc-deployment-mdx","path":"/deployment/hc_deployment/","result":{"pageContext":{"frontmatter":{"title":"Deploying Helm Charts","description":"Deploying Helm Charts"},"relativePagePath":"/deployment/hc_deployment.mdx","titleType":"page","MdxNode":{"id":"9cb242f4-5d1d-5087-b7f5-b2cd2faaab38","children":[],"parent":"b136361c-2c07-5f28-98c8-0edce9d6dbed","internal":{"content":"---\ntitle: Deploying Helm Charts\ndescription: Deploying Helm Charts\n---\n\nIn the following `helm install` command, we are using `releasename` as the value for the `helm release name`. A release name is an arbitrary name that you choose for your\ndeployment. It must be all lowercase. All kubernetes objects in your deployment will be prefixed with whatever value you provide.\n\nFor now you could just use `releasename` and for more information see [the helm documentation](https://helm.sh/docs/intro/using_helm/).\n\n<InlineNotification>\n\n**Note:** Helm v3 (`releasename` is mandatory for Helm v3)\n\n</InlineNotification>\n\n```shell\nhelm install releasename local-development/spm\n```\n\nThe `helm install` command installs the Helm Charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\nhelm install releasename local-development/Curam -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nThe following three override files for Minikube, AKS, and CRC are intended to be used with the config options listed in the\n[Configuration Reference](/deployment/config-reference) topic. The minimum details that need to be filled out for a successful deployment\nare the registry, database, and ingress details.\n\n* [Minikube](/resources/minikube-values.yaml)\n* [CodeReady Containers](/resources/crc-values.yaml)\n* [Azure Kubernetes Service](/resources/aks-values.yaml)\n* [Initial Tuning Settings](/resources/tuning-values.yaml)\n  * Can be used for AKS, EKS or OpenShift\n\n<InlineNotification>\n\n**Note on overrides:**\n\n* The full image name is based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` keys nested under `global.images` as follows:\n  * `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n  * With the given values, the resulting image name will look like this: `example.azurecr.io/foo-library/test_curam:latest`\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note**: If storage has been initialized using a version of the runbook older than 20.9.0, you will need to update your\noverride values to include a supplementary group:\n\n```yaml\nglobal:\n  mq:\n    security:\n      context:\n        supplementalGroups: [888]\n```\n\nThis is due to a update in IBM MQ, the details of which can be found in [IBM MQ charts](https://github.com/IBM/charts/blob/master/stable/ibm-mqadvanced-server-dev/RELEASENOTES.md).\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n<Tabs>\n\n<Tab label=\"ModernJava\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -e LICENSE=view ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Java8\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -e LICENSE=view ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n```shell\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.3.5.1\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the Cúram containers.\nYou can track the status of the Cúram containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-uawebapp-7cdd64987-qx8l8              1/1    Running   0         5m\nreleasename-web-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains Cúram code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nOnce Cúram is deployed, access to the application depends on the target environment:\n\n* **Local environments (Minikube or CodeReady Containers):**  \n  You can typically access the application via a localhost-based URL or a route generated automatically by the environment.\n\n* **OpenShift:**  \n  OpenShift provides a Route resource, which exposes a public URL for the application.\n\n* **Cloud environments (EKS or AKS):**  \n  Access requires additional configuration, such as exposing a LoadBalancer service, setting up an Ingress controller with DNS, or using port forwarding for temporary local access.\n","type":"Mdx","contentDigest":"c90296df743e2156173ef64154586f2b","owner":"gatsby-plugin-mdx","counter":178},"frontmatter":{"title":"Deploying Helm Charts","description":"Deploying Helm Charts"},"exports":{},"rawBody":"---\ntitle: Deploying Helm Charts\ndescription: Deploying Helm Charts\n---\n\nIn the following `helm install` command, we are using `releasename` as the value for the `helm release name`. A release name is an arbitrary name that you choose for your\ndeployment. It must be all lowercase. All kubernetes objects in your deployment will be prefixed with whatever value you provide.\n\nFor now you could just use `releasename` and for more information see [the helm documentation](https://helm.sh/docs/intro/using_helm/).\n\n<InlineNotification>\n\n**Note:** Helm v3 (`releasename` is mandatory for Helm v3)\n\n</InlineNotification>\n\n```shell\nhelm install releasename local-development/spm\n```\n\nThe `helm install` command installs the Helm Charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\nhelm install releasename local-development/Curam -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nThe following three override files for Minikube, AKS, and CRC are intended to be used with the config options listed in the\n[Configuration Reference](/deployment/config-reference) topic. The minimum details that need to be filled out for a successful deployment\nare the registry, database, and ingress details.\n\n* [Minikube](/resources/minikube-values.yaml)\n* [CodeReady Containers](/resources/crc-values.yaml)\n* [Azure Kubernetes Service](/resources/aks-values.yaml)\n* [Initial Tuning Settings](/resources/tuning-values.yaml)\n  * Can be used for AKS, EKS or OpenShift\n\n<InlineNotification>\n\n**Note on overrides:**\n\n* The full image name is based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` keys nested under `global.images` as follows:\n  * `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n  * With the given values, the resulting image name will look like this: `example.azurecr.io/foo-library/test_curam:latest`\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note**: If storage has been initialized using a version of the runbook older than 20.9.0, you will need to update your\noverride values to include a supplementary group:\n\n```yaml\nglobal:\n  mq:\n    security:\n      context:\n        supplementalGroups: [888]\n```\n\nThis is due to a update in IBM MQ, the details of which can be found in [IBM MQ charts](https://github.com/IBM/charts/blob/master/stable/ibm-mqadvanced-server-dev/RELEASENOTES.md).\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n<Tabs>\n\n<Tab label=\"ModernJava\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -e LICENSE=view ibmcom/websphere-liberty:25.0.0.3-full-java21-openj9-ubi-minimal\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Java8\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -e LICENSE=view ibmcom/websphere-liberty:25.0.0.3-full-java8-ibmjava-ubi\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n```shell\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.3.5.1\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the Cúram containers.\nYou can track the status of the Cúram containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-uawebapp-7cdd64987-qx8l8              1/1    Running   0         5m\nreleasename-web-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains Cúram code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nOnce Cúram is deployed, access to the application depends on the target environment:\n\n* **Local environments (Minikube or CodeReady Containers):**  \n  You can typically access the application via a localhost-based URL or a route generated automatically by the environment.\n\n* **OpenShift:**  \n  OpenShift provides a Route resource, which exposes a public URL for the application.\n\n* **Cloud environments (EKS or AKS):**  \n  Access requires additional configuration, such as exposing a LoadBalancer service, setting up an Ingress controller with DNS, or using port forwarding for temporary local access.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/deployment/hc_deployment.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}