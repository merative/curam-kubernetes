{"componentChunkName":"component---src-pages-known-issues-mdx","path":"/known_issues/","result":{"pageContext":{"frontmatter":{"title":"Known issues","description":"Known issues"},"relativePagePath":"/known_issues.mdx","titleType":"page","MdxNode":{"id":"c7f06e9c-6482-5000-8ce0-0ed0cd769e56","children":[],"parent":"81ad6c94-f148-5186-a29c-3e8bffa6ff53","internal":{"content":"---\ntitle: Known issues\ndescription: Known issues\n---\n\nSome issues might require product changes to resolve them.\n<AnchorLinks small>\nHelm Charts:\n  <AnchorLink>Storage initialized using a runbook version older than 20.9.0</AnchorLink>\nWebSphere Liberty:\n  <AnchorLink>Context Root Not Found error on the Cúram home page, BIRT, or caseload summary pages</AnchorLink>\n  <AnchorLink>The logs contain occurrences of the ICWWKS4001I message</AnchorLink>\n  <AnchorLink>IBM MQ XAER_PROTO issue</AnchorLink>\n  <AnchorLink>Method calls that cross the client/server boundary</AnchorLink>\nMinikube:\n  <AnchorLink>Minikube dashboard command on Red Hat</AnchorLink>\n  <AnchorLink>Limitations when using the Minikube none driver</AnchorLink>\n</AnchorLinks>\n\n## Helm Charts\n\n### Storage initialized using a runbook version older than 20.9.0\n\nIf storage has been initialized using a version of the runbook older than 20.9.0, you will need to update your\noverride values to include a supplementary group:\n\n```yaml\nglobal:\n  mq:\n    security:\n      context:\n        supplementalGroups: [888]\n```\n\nThis is due to a update in IBM MQ, the details of which can be found in the [IBM MQ charts](https://github.com/IBM/charts/blob/master/stable/ibm-mqadvanced-server-dev/RELEASENOTES.md).\n\n## WebSphere Liberty\n\n### The logs contain occurrences of the ICWWKS4001I message\n\nFor example:\n\n```\n[1/22/19 8:48:18:272 GMT] 000000ba com.ibm.ws.security.token.internal.TokenManagerImpl ICWWKS4001I: The security token cannot be validated. This can be for the following reasons:\n1. The security token was generated on another server using different keys.\n2. The token configuration or the security keys of the token service that created the token has been changed.\n3. The token service that created the token is no longer available.\n```\n\nThe root cause is users not clearing the browser cache after the application is redeployed. Users might have old, local cookie files.\n\nHowever, after a redeployment or an upgrade, the application does not recognize the cookies that are presented to it by the computer, which causes the error messages in the logs.\n\n### IBM MQ XAER_PROTO issue\n\nThe following issue has been observed in the JMS consumer pods when JMS transactions is processed by a newly deployed pod, at the initial JMS transactions. The exception in thrown by the IBM MQ Resource Adapter.\n\n```\n[INFO    ] FFDC1015I: An FFDC Incident has been created: \"javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'. com.ibm.tx.jta.impl.JTAXAResourceImpl.start 307\" at ...\n[INFO    ] FFDC1015I: An FFDC Incident has been created: \"javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'. com.ibm.tx.jta.impl.RegisteredResources.startRes 1053\" at ...\n[ERROR   ] WTRN0078E: An attempt by the transaction manager to call start on a transactional resource has resulted in an error.\nThe error code was XAER_PROTO. The exception stack trace follows: javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'.\n\tat com.ibm.mq.jmqi.JmqiXAResource.start(JmqiXAResource.java:980)\n\tat com.ibm.mq.connector.xa.XARWrapper.start(XARWrapper.java:680)\n\tat com.ibm.ws.Transaction.JTA.JTAResourceBase.start(JTAResourceBase.java:121)\n\tat [internal classes]\n\tat com.ibm.mq.connector.inbound.AbstractWorkImpl.run(AbstractWorkImpl.java:210)\n\tat com.ibm.ws.jca.inbound.security.JCASecurityContextService.runInInboundSecurityContext(JCASecurityContextService.java:49)\n\tat [internal classes]\n```\n\nThe issue does not affect the state of the Queue Manager. It does not disrupt the connection between the JMS consumer pods and IBM MQ Queue Manager nor the ability of JMS consumer to process JMS messages.\n\n### Timeout messages WTRN0006W and WTRN0124I\n\nWebSphere Liberty messages `WTRN0006W` and `WTRN0124I` may appear in `messages.log` as shown here:\n\n```\nWTRN0006W: Transaction 0000017A49B1BD8E0000000125A119FC115513F2FEA8810BAA357685E0C649F93911ADC10000017A49B1BD8E0000000125A119FC115513F2FEA8810BAA357685E0C649F93911ADC100000001 has timed out after 180 seconds.\nWTRN0124I: When the timeout occurred the thread with which the transaction is, or was most recently, associated was Thread[Default Executor-thread-4,5,Default Executor Thread Group]. The stack trace of this thread when the timeout occurred was:\n        java.lang.Object.wait(Native Method)\n        java.lang.Object.wait(Object.java:218)\n        com.ibm.ws.threading.internal.BoundedBuffer.waitGet_(BoundedBuffer.java:176)\n        com.ibm.ws.threading.internal.BoundedBuffer.take(BoundedBuffer.java:647)\n        java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1085)\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n        java.lang.Thread.run(Thread.java:822)\n```\n\nWhen these messages appear with a stacktrace similar to above it is not a relvant error or a thread hanging, as per this\n[WebSphere Application Server support page](https://www.ibm.com/support/pages/identifying-idle-threads-thread-dumps-taken-against-websphere-application-server),\nwhich also covers Liberty.\n\n### Method calls that cross the client/server boundary\n\nSome application customizations may cause the client application to reference classes in the server, which, due to isolation and classloading policies, is not possible.\nThis results in errors such as `java.lang.ClassCastException` or `java.lang.NoClassDefFoundError` exceptions.\n\n#### Workaround for client/server boundary errors\n\nThe workaround is to make the referenced class(es) available to both the client and server applications.\nFor example, if the class is in the `struct.jar` file you can modify the build of your client application image (`Client.ear`) to include the jar file.\nBefore building and deploying the application images, modify the `ClientEAR.Dockerfile` file to include these lines at the end:\n\n```\nRUN if [ \"$EAR_NAME\" = \"Curam\" ] ; then \\\n        cp /config/apps/CuramServerCode.ear/struct.jar /opt/ibm/wlp/usr/servers/defaultServer/apps/${EAR_NAME}.ear/ClientModule.war/WEB-INF/lib \\\n        && cp /config/apps/CuramServerCode.ear/struct.jar /config/apps/${EAR_NAME}.ear/ClientModule.war/WEB-INF/lib ; \\\n        fi\n```\n\n#### Why the error occurs\n\nAs part of the Cúram journey to Kubernetes, Cúram made a number of changes in the areas of transaction isolation, messaging architecture, and elasticity so that Cúram could leverage the benefits of Kubernetes.\n\nFor more information about Cúram Kubernetes architecture changes, see **Kubernetes architecture** in the *Cúram on Kubernetes Guide*.\n\n<InlineNotification>\n\nCúram PDF documentation is available to download from [Cúram Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nPart of these changes included splitting the Curam applications into separate server and client .ear files, which provided necessary flexibility and isolation when deploying and running in Kubernetes.\nHowever, classes that cross the client/server boundary cause errors due to this isolation.\nFor Cúram product classes that have this requirement the Liberty shared folder is used.\nThese product classes are the EJB local interfaces as described in the Cúram Transaction isolation. For more information about EJB local interface, see **Transaction isolation** in the *Cúram on Kubernetes Guide*.\n\nIn relation to the Liberty classloader for Cúram, Cúram specifies the `parentFirst` classloader policy. This was done to increase cohesion and lower coupling between the client and server.\nThe use of this policy means that the classes are loaded from the application server libraries to the application.\nThe shared folder is loaded before the applications and it loads all the common classes used by both the server code (CuramServerCode.ear) and client code (Curam.ear).\nAfter that the server and client load their classes using those already loaded previously from the shared folder.\n\n## Minikube\n\n### Minikube dashboard command on Red Hat\n\nWhen you follow the steps`Kubernetes dashboard` in [Monitoring the application](/monitoring/interrogate_runtime), the `minikube dashboard` command might not work on Red Hat operating systems.\nFor more information, see [Minikube issue 5815](https://github.com/kubernetes/minikube/issues/5815).\n\n### Limitations when using the Minikube none driver\n\nThere are a number of limitations associated with the Minikube none driver that are documented in [Minikube documentation](https://minikube.sigs.k8s.io/docs/reference/drivers/none/).\nYou must evaluate the impacts of these limitations for your implementation.\n\nHowever, the unavailability of the `minikube ssh` command might make it difficult to analyze and resolve problems and issues. For example, switching to the kvm2 driver enables the use of `minikube ssh` and resolves issues with the Docker Registry.\n","type":"Mdx","contentDigest":"15f92b2ca9b18661d1f862469dadb51f","owner":"gatsby-plugin-mdx","counter":169},"frontmatter":{"title":"Known issues","description":"Known issues"},"exports":{},"rawBody":"---\ntitle: Known issues\ndescription: Known issues\n---\n\nSome issues might require product changes to resolve them.\n<AnchorLinks small>\nHelm Charts:\n  <AnchorLink>Storage initialized using a runbook version older than 20.9.0</AnchorLink>\nWebSphere Liberty:\n  <AnchorLink>Context Root Not Found error on the Cúram home page, BIRT, or caseload summary pages</AnchorLink>\n  <AnchorLink>The logs contain occurrences of the ICWWKS4001I message</AnchorLink>\n  <AnchorLink>IBM MQ XAER_PROTO issue</AnchorLink>\n  <AnchorLink>Method calls that cross the client/server boundary</AnchorLink>\nMinikube:\n  <AnchorLink>Minikube dashboard command on Red Hat</AnchorLink>\n  <AnchorLink>Limitations when using the Minikube none driver</AnchorLink>\n</AnchorLinks>\n\n## Helm Charts\n\n### Storage initialized using a runbook version older than 20.9.0\n\nIf storage has been initialized using a version of the runbook older than 20.9.0, you will need to update your\noverride values to include a supplementary group:\n\n```yaml\nglobal:\n  mq:\n    security:\n      context:\n        supplementalGroups: [888]\n```\n\nThis is due to a update in IBM MQ, the details of which can be found in the [IBM MQ charts](https://github.com/IBM/charts/blob/master/stable/ibm-mqadvanced-server-dev/RELEASENOTES.md).\n\n## WebSphere Liberty\n\n### The logs contain occurrences of the ICWWKS4001I message\n\nFor example:\n\n```\n[1/22/19 8:48:18:272 GMT] 000000ba com.ibm.ws.security.token.internal.TokenManagerImpl ICWWKS4001I: The security token cannot be validated. This can be for the following reasons:\n1. The security token was generated on another server using different keys.\n2. The token configuration or the security keys of the token service that created the token has been changed.\n3. The token service that created the token is no longer available.\n```\n\nThe root cause is users not clearing the browser cache after the application is redeployed. Users might have old, local cookie files.\n\nHowever, after a redeployment or an upgrade, the application does not recognize the cookies that are presented to it by the computer, which causes the error messages in the logs.\n\n### IBM MQ XAER_PROTO issue\n\nThe following issue has been observed in the JMS consumer pods when JMS transactions is processed by a newly deployed pod, at the initial JMS transactions. The exception in thrown by the IBM MQ Resource Adapter.\n\n```\n[INFO    ] FFDC1015I: An FFDC Incident has been created: \"javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'. com.ibm.tx.jta.impl.JTAXAResourceImpl.start 307\" at ...\n[INFO    ] FFDC1015I: An FFDC Incident has been created: \"javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'. com.ibm.tx.jta.impl.RegisteredResources.startRes 1053\" at ...\n[ERROR   ] WTRN0078E: An attempt by the transaction manager to call start on a transactional resource has resulted in an error.\nThe error code was XAER_PROTO. The exception stack trace follows: javax.transaction.xa.XAException: The method 'xa_start' has failed with errorCode '-6'.\n\tat com.ibm.mq.jmqi.JmqiXAResource.start(JmqiXAResource.java:980)\n\tat com.ibm.mq.connector.xa.XARWrapper.start(XARWrapper.java:680)\n\tat com.ibm.ws.Transaction.JTA.JTAResourceBase.start(JTAResourceBase.java:121)\n\tat [internal classes]\n\tat com.ibm.mq.connector.inbound.AbstractWorkImpl.run(AbstractWorkImpl.java:210)\n\tat com.ibm.ws.jca.inbound.security.JCASecurityContextService.runInInboundSecurityContext(JCASecurityContextService.java:49)\n\tat [internal classes]\n```\n\nThe issue does not affect the state of the Queue Manager. It does not disrupt the connection between the JMS consumer pods and IBM MQ Queue Manager nor the ability of JMS consumer to process JMS messages.\n\n### Timeout messages WTRN0006W and WTRN0124I\n\nWebSphere Liberty messages `WTRN0006W` and `WTRN0124I` may appear in `messages.log` as shown here:\n\n```\nWTRN0006W: Transaction 0000017A49B1BD8E0000000125A119FC115513F2FEA8810BAA357685E0C649F93911ADC10000017A49B1BD8E0000000125A119FC115513F2FEA8810BAA357685E0C649F93911ADC100000001 has timed out after 180 seconds.\nWTRN0124I: When the timeout occurred the thread with which the transaction is, or was most recently, associated was Thread[Default Executor-thread-4,5,Default Executor Thread Group]. The stack trace of this thread when the timeout occurred was:\n        java.lang.Object.wait(Native Method)\n        java.lang.Object.wait(Object.java:218)\n        com.ibm.ws.threading.internal.BoundedBuffer.waitGet_(BoundedBuffer.java:176)\n        com.ibm.ws.threading.internal.BoundedBuffer.take(BoundedBuffer.java:647)\n        java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1085)\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n        java.lang.Thread.run(Thread.java:822)\n```\n\nWhen these messages appear with a stacktrace similar to above it is not a relvant error or a thread hanging, as per this\n[WebSphere Application Server support page](https://www.ibm.com/support/pages/identifying-idle-threads-thread-dumps-taken-against-websphere-application-server),\nwhich also covers Liberty.\n\n### Method calls that cross the client/server boundary\n\nSome application customizations may cause the client application to reference classes in the server, which, due to isolation and classloading policies, is not possible.\nThis results in errors such as `java.lang.ClassCastException` or `java.lang.NoClassDefFoundError` exceptions.\n\n#### Workaround for client/server boundary errors\n\nThe workaround is to make the referenced class(es) available to both the client and server applications.\nFor example, if the class is in the `struct.jar` file you can modify the build of your client application image (`Client.ear`) to include the jar file.\nBefore building and deploying the application images, modify the `ClientEAR.Dockerfile` file to include these lines at the end:\n\n```\nRUN if [ \"$EAR_NAME\" = \"Curam\" ] ; then \\\n        cp /config/apps/CuramServerCode.ear/struct.jar /opt/ibm/wlp/usr/servers/defaultServer/apps/${EAR_NAME}.ear/ClientModule.war/WEB-INF/lib \\\n        && cp /config/apps/CuramServerCode.ear/struct.jar /config/apps/${EAR_NAME}.ear/ClientModule.war/WEB-INF/lib ; \\\n        fi\n```\n\n#### Why the error occurs\n\nAs part of the Cúram journey to Kubernetes, Cúram made a number of changes in the areas of transaction isolation, messaging architecture, and elasticity so that Cúram could leverage the benefits of Kubernetes.\n\nFor more information about Cúram Kubernetes architecture changes, see **Kubernetes architecture** in the *Cúram on Kubernetes Guide*.\n\n<InlineNotification>\n\nCúram PDF documentation is available to download from [Cúram Support Docs](https://curam-spm-devops.github.io/wh-support-docs/spm/pdf-documentation/).\n\n</InlineNotification>\n\nPart of these changes included splitting the Curam applications into separate server and client .ear files, which provided necessary flexibility and isolation when deploying and running in Kubernetes.\nHowever, classes that cross the client/server boundary cause errors due to this isolation.\nFor Cúram product classes that have this requirement the Liberty shared folder is used.\nThese product classes are the EJB local interfaces as described in the Cúram Transaction isolation. For more information about EJB local interface, see **Transaction isolation** in the *Cúram on Kubernetes Guide*.\n\nIn relation to the Liberty classloader for Cúram, Cúram specifies the `parentFirst` classloader policy. This was done to increase cohesion and lower coupling between the client and server.\nThe use of this policy means that the classes are loaded from the application server libraries to the application.\nThe shared folder is loaded before the applications and it loads all the common classes used by both the server code (CuramServerCode.ear) and client code (Curam.ear).\nAfter that the server and client load their classes using those already loaded previously from the shared folder.\n\n## Minikube\n\n### Minikube dashboard command on Red Hat\n\nWhen you follow the steps`Kubernetes dashboard` in [Monitoring the application](/monitoring/interrogate_runtime), the `minikube dashboard` command might not work on Red Hat operating systems.\nFor more information, see [Minikube issue 5815](https://github.com/kubernetes/minikube/issues/5815).\n\n### Limitations when using the Minikube none driver\n\nThere are a number of limitations associated with the Minikube none driver that are documented in [Minikube documentation](https://minikube.sigs.k8s.io/docs/reference/drivers/none/).\nYou must evaluate the impacts of these limitations for your implementation.\n\nHowever, the unavailability of the `minikube ssh` command might make it difficult to analyze and resolve problems and issues. For example, switching to the kvm2 driver enables the use of `minikube ssh` and resolves issues with the Docker Registry.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/known_issues.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}