{"componentChunkName":"component---src-pages-prereq-mq-mq-on-vms-mdx","path":"/prereq/mq/mq-on-vms/","result":{"pageContext":{"frontmatter":{"title":"MQ on Vms","description":"MQ on Vms","tabs":["MQ Overview","MQ on VMs","MQ on OpenShift","MQ Containers"]},"relativePagePath":"/prereq/mq/mq-on-vms.mdx","titleType":"page","MdxNode":{"id":"01d2e031-51c7-5c38-911b-86e53afacb8e","children":[],"parent":"5a048aeb-e491-5fbb-9e74-a0a81da92754","internal":{"content":"---\ntitle: MQ on Vms\ndescription: MQ on Vms\ntabs: ['MQ Overview','MQ on VMs', 'MQ on OpenShift','MQ Containers']\n---\n\nCÃºram also supports **IBM MQ LTS on a VM** , when running on outside of openshift. The following steps outline how to do this. In this runbook we will outline the steps to create:\n\n* [Queues](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-queues)\n* [Listeners](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-listeners)\n* [Channels](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-channels)\n* [Topics](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-topic-objects)\n\n<InlineNotification>\n\n**Note:** The MQ version for this runbook verification is  9.3.5 LTS.\n\n</InlineNotification>\n\nFor the runbook, two standalone VMs were used as MQ nodes.\n\n### Queue manager names\n\nFor runbook configuration, the following naming conversion was used throughout the MQ setup: `NamingConvention_AppName`. This must be unique, but ensure you change the commands used on this page accordingly.\n\n**Queue Name:**\n\n* curam_qm\n\n**Channel Name:** This value should be all capitals\n\n`CHL_NamingConvention_AppName`\n\n* CHL_CURAM_QM\n\n**Listeners Name:** This value should be all capitals\n\n`LS_NamingConvention_AppName`\n\n* LS_CURAM_QM\n\n## MQ stages\n\nOn both MQ nodes run the following command as root:\n\n```shell\nsu - mqm # Changing user into mqm\nexport PATH=/opt/mqm/inst1/bin:$PATH\n```\n\n<InlineNotification kind=\"warning\">\n\n**Important!**\n\nRun the export PATH command on both MQ nodes, this command will be used in further commands in the runbook.\n\n</InlineNotification>\n\n## Shared storage\n\nCreate the shared storage for our nodes.\n\n<InlineNotification>\n\n**Note:** Run the commands as root.\n\n</InlineNotification>\n\nOn the shared node run the following commands:\n\n```shell\nmkdir -p /MQHA/logs\nmkdir -p /MQHA/qmgrs\nmkdir -p /MQHA/scratch\nuseradd mqha -s /sbin/nologin\nchown -R mqha:mqha /MQHA/*\n```\n\nVerify that the UID and GUID match the owner ID by running the following command:\n\n```shell\necho \"/MQHA  MQ.FQDN(rw,sync,no_wdelay,fsid=0,anonuid=1001,anongid=1001)\" >> /etc/exports\n```\n\nStart and enable both the nfs service and rpcbind service by running the following commands:\n\n```shell\nsystemctl start nfs-server.service\nsystemctl enable nfs-server.service\nsystemctl start rpcbind\nsystemctl enable rpcbind\n```\n\nOn MQ nodes run the following commands:\n\n<InlineNotification>\n\n**Note:** Commands to be run as root.\n\n</InlineNotification>\n\n```shell\necho \"SHAREDNODEADDRESS:/MQHA  /MQHA  nfs  defaults  0 0\" >> /etc/fstab\nsystemctl start rpcbind\nsystemctl enable rpcbind\nmkdir -p /MQHA\nchmod 1777 /MQHA #Check permissions\nmount /MQHA\n```\n\n## Create QMs\n\nWhen creating the queue, start on the secondary node first then move to the primary node.\n\nOn the secondary MQ node, run the following commands:\n\n```shell\ncrtmqm -ld /MQHA/logs -md /MQHA/qmgrs curam_qm\ndspmqinf -o command curam_qm\n```\n\nSave the output of the `dspmqinf -o command curam_qm` command, it should look like the following:\n\n```shell\naddmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\n```\n\nWait for /MQHA/qmgrs/curam_qm/qm.ini to appear on other node\n\nOn the primary MQ node run the following commands:\n\n```shell\naddmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\nstrmqm -x curam_qm\n```\n\nOn the secondary MQ node run the following command:\n\n```shell\nstrmqm -x curam_qm\n```\n\n## Create queues\n\nOn the primary MQ node run the following commands:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE QLOCAL(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWENACTMENT) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWACTIVITY) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPENACTMENT) BOTHRESH(5) BOQNAME(QN.DPERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nALTER QMGR CHLAUTH(DISABLED)\nALTER QMGR DEADQ(QN.CURAMDEADMESSAGEQUEUE)\nEOS\n```\n\n## Create listeners\n\nOn the primary MQ node run the following commands:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE LISTENER (LS_CURAM_QM) TRPTYPE (TCP) CONTROL (QMGR) PORT (1414)\nSTART LISTENER (LS_CURAM_QM)\nEOS\n```\n\n## Create channels\n\nOn the primary MQ node run the following command:\n\n* Enter your MQ node names into the following commands:\n\n<InlineNotification>\n\n**Note:** CERTLABL expects the value to be lower case ibmwebspheremq + Queue Name\nFor this example it will be ibmwebspheremqcuram_qm\n\n</InlineNotification>\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(SVRCONN)  TRPTYPE(TCP) MCAUSER('mqm') SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256)  CERTLABL ('ibmwebspheremqcuram_qm') SSLCAUTH (OPTIONAL) REPLACE\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME('Node1(1414),Node2(1414)') QMNAME(curam_qm) SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256) CERTLABL ('ibmwebspheremqcuram_qm') REPLACE\nEOS\n```\n\n## Create topics\n\nOn the primary MQ node run the following command:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE TOPIC (CURAMCACHEINVALIDATIONTOPIC) TOPICSTR (CURAMCACHEINVALIDATIONTOPIC)\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nEOS\n```\n\n## Configure security\n\nThe configuration of security is in four parts\n\n* Setting the object type.\n* Creating the keystore and certs.\n* Updating the certs on both nodes.\n* Refreshing security settings.\n\n<InlineNotification>\n\n**Note:**\n\nThe application pods must connect to MQ using a non-privileged account. The example commands use `mqclient` as the non-privileged account.\nThis username must be set in the secret referenced by the `global.mq.queueManager.secret.name` property. See the [Handling Secrets](/deployment/secrets) page for more information.\n\n</InlineNotification>\n\nOn the secondary MQ node run the following command:\n\n```shell\nuseradd -g 0 -M mqclient && usermod -L mqclient\n```\n\nOn the primary MQ node run the following commands:\n\n```shell\nuseradd -g 0 -M mqclient && usermod -L mqclient\nrunmqsc curam_qm <<-EOS\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWACTIVITY') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.CURAMDEADMESSAGEQUEUE') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(LISTENER) PROFILE('LS_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CHANNEL) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CLNTCONN) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(TOPIC) PROFILE('CURAMCACHEINVALIDATIONTOPIC') PRINCIPAL('mqclient') AUTHADD(ALL)\nEOS\n```\n\n```shell\nrunmqckm -keydb -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -type cms -pw Passw0rd -stash\nrunmqakm -cert -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -size 2048 -dn \"CN=curam_qm,O=IBM,C=US\" -x509version 3 -expire 365 -sig_alg SHA256WithRSA\nrunmqakm -cert -extract -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.arm\nrunmqakm -cert -export -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -target_type pkcs12 -target_pw Passw0rd\n```\n\n```shell\nopenssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.key\nopenssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.crt\n```\n\n```shell\nrunmqsc curam_qm <<-EOS\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\nREFRESH SECURITY TYPE(CONNAUTH)\nEOS\n```\n\nAfter these stages have been run MQ should be configured.\n\n## Clean up QMs/channels/listeners\n\nUsed these steps if you are reconfiguring MQ or cleaning up MQ.\n\nOn both MQ nodes run the following commands:\n\n```shell\nendmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n```\n\nOn either MQ node run the following commands:\n\n```shell\nrm -rf /MQHA/qmgrs/**\nrm -rf /MQHA/logs/**\nrm -rf /MQHA/scratch\nendmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n```\n","type":"Mdx","contentDigest":"0f5ac094683fd211ae584831a7527a36","owner":"gatsby-plugin-mdx","counter":235},"frontmatter":{"title":"MQ on Vms","description":"MQ on Vms","tabs":["MQ Overview","MQ on VMs","MQ on OpenShift","MQ Containers"]},"exports":{},"rawBody":"---\ntitle: MQ on Vms\ndescription: MQ on Vms\ntabs: ['MQ Overview','MQ on VMs', 'MQ on OpenShift','MQ Containers']\n---\n\nCÃºram also supports **IBM MQ LTS on a VM** , when running on outside of openshift. The following steps outline how to do this. In this runbook we will outline the steps to create:\n\n* [Queues](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-queues)\n* [Listeners](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-listeners)\n* [Channels](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-channels)\n* [Topics](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=types-topic-objects)\n\n<InlineNotification>\n\n**Note:** The MQ version for this runbook verification is  9.3.5 LTS.\n\n</InlineNotification>\n\nFor the runbook, two standalone VMs were used as MQ nodes.\n\n### Queue manager names\n\nFor runbook configuration, the following naming conversion was used throughout the MQ setup: `NamingConvention_AppName`. This must be unique, but ensure you change the commands used on this page accordingly.\n\n**Queue Name:**\n\n* curam_qm\n\n**Channel Name:** This value should be all capitals\n\n`CHL_NamingConvention_AppName`\n\n* CHL_CURAM_QM\n\n**Listeners Name:** This value should be all capitals\n\n`LS_NamingConvention_AppName`\n\n* LS_CURAM_QM\n\n## MQ stages\n\nOn both MQ nodes run the following command as root:\n\n```shell\nsu - mqm # Changing user into mqm\nexport PATH=/opt/mqm/inst1/bin:$PATH\n```\n\n<InlineNotification kind=\"warning\">\n\n**Important!**\n\nRun the export PATH command on both MQ nodes, this command will be used in further commands in the runbook.\n\n</InlineNotification>\n\n## Shared storage\n\nCreate the shared storage for our nodes.\n\n<InlineNotification>\n\n**Note:** Run the commands as root.\n\n</InlineNotification>\n\nOn the shared node run the following commands:\n\n```shell\nmkdir -p /MQHA/logs\nmkdir -p /MQHA/qmgrs\nmkdir -p /MQHA/scratch\nuseradd mqha -s /sbin/nologin\nchown -R mqha:mqha /MQHA/*\n```\n\nVerify that the UID and GUID match the owner ID by running the following command:\n\n```shell\necho \"/MQHA  MQ.FQDN(rw,sync,no_wdelay,fsid=0,anonuid=1001,anongid=1001)\" >> /etc/exports\n```\n\nStart and enable both the nfs service and rpcbind service by running the following commands:\n\n```shell\nsystemctl start nfs-server.service\nsystemctl enable nfs-server.service\nsystemctl start rpcbind\nsystemctl enable rpcbind\n```\n\nOn MQ nodes run the following commands:\n\n<InlineNotification>\n\n**Note:** Commands to be run as root.\n\n</InlineNotification>\n\n```shell\necho \"SHAREDNODEADDRESS:/MQHA  /MQHA  nfs  defaults  0 0\" >> /etc/fstab\nsystemctl start rpcbind\nsystemctl enable rpcbind\nmkdir -p /MQHA\nchmod 1777 /MQHA #Check permissions\nmount /MQHA\n```\n\n## Create QMs\n\nWhen creating the queue, start on the secondary node first then move to the primary node.\n\nOn the secondary MQ node, run the following commands:\n\n```shell\ncrtmqm -ld /MQHA/logs -md /MQHA/qmgrs curam_qm\ndspmqinf -o command curam_qm\n```\n\nSave the output of the `dspmqinf -o command curam_qm` command, it should look like the following:\n\n```shell\naddmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\n```\n\nWait for /MQHA/qmgrs/curam_qm/qm.ini to appear on other node\n\nOn the primary MQ node run the following commands:\n\n```shell\naddmqinf -s QueueManager -v Name=curam_qm -v Directory=curam_qm -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/curam_qm\nstrmqm -x curam_qm\n```\n\nOn the secondary MQ node run the following command:\n\n```shell\nstrmqm -x curam_qm\n```\n\n## Create queues\n\nOn the primary MQ node run the following commands:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE QLOCAL(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWENACTMENT) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWACTIVITY) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPENACTMENT) BOTHRESH(5) BOQNAME(QN.DPERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nALTER QMGR CHLAUTH(DISABLED)\nALTER QMGR DEADQ(QN.CURAMDEADMESSAGEQUEUE)\nEOS\n```\n\n## Create listeners\n\nOn the primary MQ node run the following commands:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE LISTENER (LS_CURAM_QM) TRPTYPE (TCP) CONTROL (QMGR) PORT (1414)\nSTART LISTENER (LS_CURAM_QM)\nEOS\n```\n\n## Create channels\n\nOn the primary MQ node run the following command:\n\n* Enter your MQ node names into the following commands:\n\n<InlineNotification>\n\n**Note:** CERTLABL expects the value to be lower case ibmwebspheremq + Queue Name\nFor this example it will be ibmwebspheremqcuram_qm\n\n</InlineNotification>\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(SVRCONN)  TRPTYPE(TCP) MCAUSER('mqm') SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256)  CERTLABL ('ibmwebspheremqcuram_qm') SSLCAUTH (OPTIONAL) REPLACE\nDEFINE CHANNEL(CHL_CURAM_QM) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME('Node1(1414),Node2(1414)') QMNAME(curam_qm) SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256) CERTLABL ('ibmwebspheremqcuram_qm') REPLACE\nEOS\n```\n\n## Create topics\n\nOn the primary MQ node run the following command:\n\n```shell\nrunmqsc curam_qm <<-EOS\nDEFINE TOPIC (CURAMCACHEINVALIDATIONTOPIC) TOPICSTR (CURAMCACHEINVALIDATIONTOPIC)\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nEOS\n```\n\n## Configure security\n\nThe configuration of security is in four parts\n\n* Setting the object type.\n* Creating the keystore and certs.\n* Updating the certs on both nodes.\n* Refreshing security settings.\n\n<InlineNotification>\n\n**Note:**\n\nThe application pods must connect to MQ using a non-privileged account. The example commands use `mqclient` as the non-privileged account.\nThis username must be set in the secret referenced by the `global.mq.queueManager.secret.name` property. See the [Handling Secrets](/deployment/secrets) page for more information.\n\n</InlineNotification>\n\nOn the secondary MQ node run the following command:\n\n```shell\nuseradd -g 0 -M mqclient && usermod -L mqclient\n```\n\nOn the primary MQ node run the following commands:\n\n```shell\nuseradd -g 0 -M mqclient && usermod -L mqclient\nrunmqsc curam_qm <<-EOS\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWACTIVITY') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWENACTMENT') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWERROR') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.CURAMDEADMESSAGEQUEUE') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(LISTENER) PROFILE('LS_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CHANNEL) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CLNTCONN) PROFILE('CHL_CURAM_QM') PRINCIPAL('mqclient') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(TOPIC) PROFILE('CURAMCACHEINVALIDATIONTOPIC') PRINCIPAL('mqclient') AUTHADD(ALL)\nEOS\n```\n\n```shell\nrunmqckm -keydb -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -type cms -pw Passw0rd -stash\nrunmqakm -cert -create -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -size 2048 -dn \"CN=curam_qm,O=IBM,C=US\" -x509version 3 -expire 365 -sig_alg SHA256WithRSA\nrunmqakm -cert -extract -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.arm\nrunmqakm -cert -export -db /MQHA/qmgrs/curam_qm/ssl/key.kdb -stashed -label ibmwebspheremqcuram_qm -target /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -target_type pkcs12 -target_pw Passw0rd\n```\n\n```shell\nopenssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.key\nopenssl pkcs12 -in /MQHA/qmgrs/curam_qm/ssl/key_curam_qm.p12 -passin pass:Passw0rd -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /MQHA/qmgrs/curam_qm/ssl/tls.crt\n```\n\n```shell\nrunmqsc curam_qm <<-EOS\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\nREFRESH SECURITY TYPE(CONNAUTH)\nEOS\n```\n\nAfter these stages have been run MQ should be configured.\n\n## Clean up QMs/channels/listeners\n\nUsed these steps if you are reconfiguring MQ or cleaning up MQ.\n\nOn both MQ nodes run the following commands:\n\n```shell\nendmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n```\n\nOn either MQ node run the following commands:\n\n```shell\nrm -rf /MQHA/qmgrs/**\nrm -rf /MQHA/logs/**\nrm -rf /MQHA/scratch\nendmqm -w curam_qm\ndltmqm curam_qm\nrmvmqinf curam_qm\n```\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/prereq/mq/mq-on-vms.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}