{"componentChunkName":"component---src-pages-prereq-kubernetes-minikube-mdx","path":"/prereq/kubernetes/minikube/","result":{"pageContext":{"frontmatter":{"title":"Minikube","description":"Minikube","tabs":["Kubernetes Overview","Minikube","AKS","EKS"]},"relativePagePath":"/prereq/kubernetes/minikube.mdx","titleType":"page","MdxNode":{"id":"bbaa282a-1f0a-5ab3-8f0b-ee6f0fde3d78","children":[],"parent":"b207187c-8b94-5493-b6b1-64e0c94c8527","internal":{"content":"---\ntitle: Minikube\ndescription: Minikube\ntabs: ['Kubernetes Overview','Minikube','AKS','EKS']\n---\n\nMinikube runs a single-node Kubernetes cluster inside a virtual machine (VM) on your laptop, for users who want to try out Kubernetes or develop with it.\nMinikube documentation is available at [Installing Kubernetes with Minikube](https://minikube.sigs.k8s.io/docs/start/).\nThe following sections are not a substitute for the official documentation but they get you started in a classic configuration.\n\nThe following installation steps are described:\n\n* Installing Minikube\n* Starting Minikube\n* Setting up the Docker® registry\n* Configuring the hosts file for Minikube\n* Enabling Helm for Minikube\n* A summary of some useful Minikube commands\n\n## Minikube installation\n\nMinikube installation steps are described in the official documentation for your preferred Operating System: [Install Minikube](https://minikube.sigs.k8s.io/docs/start/).\n\n## Starting Minikube\n\nMinikube can be started with a command as simple as `minikube start` without any additional parameters. However, the resulting VM will be too small to deploy an instance of Cúram,\nso several other parameters are required as described in the following sections.\n\n### Specifying the resource allocation\n\nYou can add properties to specify the resource allocation. For example:\n\n* `--cpus 4` to use 4 CPUs\n* `--memory 8G` to use 8 GB of RAM\n* `--disk-size=30G` to use 30 GB of disk space\n\n### Specifying the VM driver\n\nAdd the `--driver=` option to the `minikube start` command to specify the underlying virtual machine driver. The following drivers were tested:\n\n* [VirtualBox](https://minikube.sigs.k8s.io/docs/drivers/virtualbox/) (`virtualbox`) on OSX and Linux\n* [VMware Fusion](https://minikube.sigs.k8s.io/docs/drivers/vmware/) (`vmware`) on OSX\n  * **Note**: There is an [issue](https://github.com/kubernetes/minikube/issues/9720) running Minikube on macOS Big Sur with VMware Fusion 12. If you are using Big Sur, use an alternative driver.\n* [Docker](https://minikube.sigs.k8s.io/docs/drivers/kvm2/) (`docker`) on Linux\n* [KVM](https://minikube.sigs.k8s.io/docs/drivers/kvm2/) (`kvm2`) on Linux\n* [Hyperv](https://minikube.sigs.k8s.io/docs/drivers/hyperv/) (`hyperv`) on Windows\n\nThe [Install Minikube](https://minikube.sigs.k8s.io/docs/start/) page gives you more information on available VM driver options.\n\n### Specifying the insecure registry\n\nYou must specify the `--insecure-registry` option to reference the Docker registry that is created. The `--insecure-registry` value is the same as specified in the  `daemon.json` file.\n\n<InlineNotification>\n\n**Note:** Because of a limitation in the current version of Minikube, adding the `--insecure-registry` option works on a new Minikube instance only.\nIf you start Minikube, be sure to run `minikube stop` and `minikube delete` before you start it again with the `--insecure-registry` option.\n\n</InlineNotification>\n\nFor Windows see the [Minikube handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#enabling-insecure-registries) for information regarding the `--insecure-registry \"10.0.0.0/24`\" setting on the `minikube start` command.\n\n### Specifying the Kubernetes version\n\nYou can override the version of Kubernetes that gets installed inside the Minikube VM by using the `--kubernetes-version` flag. This flag controls the compatibility between the client tools and the Kubernetes specification.\n\nIf you override the Kubernetes version, ensure that you download and install the corresponding version of `kubectl` - this version must be the same version as the Kubernetes cluster.\n\n<InlineNotification>\n\n**Note:** The `kubectl` version running locally and on Minikube should be compatible, so it's possible to use the `--kubernetes-version` flag to keep them consistent.\n\n</InlineNotification>\n\n### Minikube start command\n\n<InlineNotification kind=\"info\">\n\n**Note:** In the following example for Mac and Linux we set the `--insecure-registry` option passing in a subnet of `192.168.0.0/16`.\nThe IP address on your machine _may_ not be on the appropriate network for this subnet to work.\nTherefore, start a Minikube instance to verify the IP address begins with 192.168.0.X. You need only do this once.\nSee the note in [Specifying the insecure registry](#specifying-the-insecure-registry).\n\n</InlineNotification>\n\nExample `minikube start` commands based on the recommended settings above:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nminikube start --driver=virtualbox --cpus 4 --memory 8G \\\n               --insecure-registry \"192.168.0.0/16\" \\\n               --disk-size='30G' \\\n               --kubernetes-version v1.20.11\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nminikube start --vm-driver=hyperv --cpus 4 --memory 8G `\n              --insecure-registry \"10.0.0.0/24\" `\n              --disk-size='30G' `\n              --kubernetes-version v1.20.11\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Using Docker inside the Minikube VM\n\nYou can use the Docker installed in your local environment or, optionally, the Docker inside the Minikube VM.\n\nThe command to use the Docker inside of the Minikube VM is:\n\n```shell\nminikube docker-env\n```\n\nThe output of that command will instruct you how to run the command for your particular shell as illustrated:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\neval $(minikube -p minikube docker-env)\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n& minikube -p minikube docker-env | Invoke-Expression\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nThen `docker` commands will operate against the Minikube VM's docker, allowing, for example, the likes of `docker run` for chartmuseum and the `docker build` commands to work.\nDon't forget that if you are using multiple shells you must run the `minikube docker-env` command in each shell.\n\n## Docker Hub download rate limit and Minikube\n\nIn November 2020, Docker introduced [download rate limits](https://docs.docker.com/docker-hub/download-rate-limit/) on Docker Hub.\nNormally, this can be mitigated by providing an Image Pull Secret to the deployment.\n\nFor Minikube addons these pull secrets are not exposed, so the solution involves providing a `config.json` file containing the credentials to the Kubelet process running inside the Minikube environment.\n\n1. Authenticate your local Docker client with Docker Hub: `docker login`\n    * You can register for a free account on the [Docker Hub website](https://hub.docker.com/signup)\n2. Copy the contents of your local Docker secrets:\n\n    ```shell\n    cat ~/.docker/config.json && echo\n    ```\n\n    * The output should look something like below:\n\n    ```json\n    {\n      \"auths\": {\n        \"https://index.docker.io/v1/\": {\n          \"auth\": \"<base64 of username:password>\"\n        }\n      }\n    }\n    ```\n\n3. Open a terminal in your Minikube VM:\n\n    ```shell\n    minikube ssh\n    ```\n\n4. Paste the contents of the file from step 2 into `/var/lib/kubelet/config.json`:\n\n    * Edit the command to include the contents of your `config.json` file first\n\n    ```shell\n    cat << EOS | sudo tee /var/lib/kubelet/config.json\n    {\n      \"auths\": {\n        \"https://index.docker.io/v1/\": {\n          \"auth\": \"<base64 of username:password>\"\n        }\n      }\n    }\n    EOS\n    ```\n\n5. Restart the `kubelet` process in the Minikube VM:\n\n    ```shell\n    sudo systemctl restart kubelet\n    ```\n\n6. Exit the Minikube terminal.\n\n## Docker registry\n\nYou need a registry to use docker images with Helm in Minikube.\nThere are different types of registries that can be used. However, this page describes a simple registry option that doesn't require extra components.\n\nMinikube provides an add-on to run a registry in a container. For more information, see [How to access the Docker registry within minikube](https://minikube.sigs.k8s.io/docs/tasks/docker_registry/).\n\nYou can use the following command to enable the add-on:\n\n```shell\nminikube addons enable registry\n```\n\nWhen enabled, starting Minikube starts two pods on the `kube-system` namespace, named `registry` and `registry-proxy`. Now the registry is active and can be used. The registry points to the Minikube IP address on port 5000.\n\nThe containers don't mount any volumes, so stopping Minikube deletes the registry content.\n\nFor Windows, you must follow the steps in the [Minikube Handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows) and set the value of the `DOCKER_REGISTRY` environment variable as follows:\n\n```powershell\n$env:DOCKER_REGISTRY = \"localhost:5000\"\n```\n\n### Using the insecure registry on Windows\n\nFor more information see the [Minikube handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows).\n\nPerform these steps to use the insecure registry on Windows:\n\n* Confirm the registry service is running in minikube:\n  `kubectl get service --namespace kube-system`\n* Part one of making the registry port available:\n  `kubectl port-forward --namespace kube-system service/registry 5000:80`\n  Note: The port-forward sporadically times out/dies; so, you have to periodically check that it's running and renter it if needed.\n* Part two of making the registry port available:\n  `docker run -d --rm -it --network=host alpine ash -c \"apk add socat && socat TCP-LISTEN:5000,reuseaddr,fork TCP:host.docker.internal:5000\"`\n* Test the registry:\n  `curl http://localhost:5000/v2/_catalog`\n  This first time it will be empty: `{\"repositories\":[]}`\n  Running the same `curl` command inside Minikube via `minikube ssh` is also a good check.\n\n## Hostname configuration for Minikube\n\nThis runbook uses a generic hostname of `minikube.local` as an example in commands and the configuration files.\nYou should add the Minikube IP address to the `hosts` file by using the generic hostname, or else modify the usage of `minikube.local` in this runbook to reflect your local hostname.\n\nSpecifying `minikube ip` in the following command returns the Minikube VM's IP address that is accessible from your workstation:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\necho -e \"$(minikube ip)\\tminikube.local\" | sudo tee -a /etc/hosts\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nAdd-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value \"$(minikube ip)`tminikube.local\" -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nIf not using the Docker inside of the Minikube VM [minikube docker-env](Using Docker inside the Minikube VM), the local Docker client configuration must be also be updated with the corresponding IP address.\n\n* Update the `daemon.json` docker configuration file with the Minikube IP address. This file is usually located in:\n  * `~/.docker/daemon.json` on OSX\n  * `/etc/docker/daemon.json` on Linux\n  * `C:\\ProgramData\\Docker\\config\\daemon.json` or `$env:USERPROFILE\\.docker\\daemon.json` on Windows, depending on your installation.\n* Restart the Docker daemon:\n  * On Linux - run: `sudo systemctl restart docker`\n  * On Mac and Windows - use the \"Restart Docker\" menu option in the Docker Desktop application.\n\nExample of `daemon.json`:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```json\n{\n  \"insecure-registries\": [\n    \"192.168.0.0/16\"\n  ]\n}\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows\">\n<Row>\n<Column>\n\n```json\n{\n  \"insecure-registries\": [\n    \"10.0.0.0/24\"\n  ],\n}\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** You can provide a specific IP address, or specify a subnet to future-proof the Docker client configuration.\n\n</InlineNotification>\n\nThe Minikube IP address might change when you run `minikube delete`. If it changes, you must repeat these steps.\n\nTherefore, reconfirm the Minikube IP and its setting in the `hosts` file every time you start Minikube, or after you run `minikube delete`.\n\n## Minikube Ingress\n\nIngress is a reverse proxy, which sits in front of the application that is deployed in Kubernetes. It facilitates use of a custom domain name to access a deployed application, instead of using service ports.\nTo enable Ingress for Minikube, you must enable the `ingress` add-on.\n\n```shell\nminikube addons enable ingress\n```\n\n## Create a namespace\n\nCreate a namespace for the Cúram deployment, again use an environment variable for your convenience when following the guide.\n\nCreate the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `-`, and must start and end with an alphanumeric character (e.g. `my-name`,  or `123-abc`):\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nexport PROJECT=\"dev\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n$env:PROJECT = \"dev\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nCreate the namespace:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nkubectl create namespace $PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nkubectl create namespace $env:PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nSwitch to the new namespace:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nkubectl config set-context --current --namespace $PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nkubectl config set-context --current --namespace $env:PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Useful Minikube commands\n\nSome useful Minikube commands are as follows:\n\n```shell\n# Sample commands\nminikube status       # See if Minikube is running\nminikube start        # Create and start Minikube\nminikube dashboard    # Access the Kubernetes dashboard running within the Minikube cluster\nminikube ssh          # Login into the Minikube VM\nminikube addons list  # Show the status of the available add-ons\nminikube stop         # Stop Minikube\nminikube delete       # Delete the Minikube VM\nminikube ip           # Show the Minikube IP\n```\n\nFor a full list of commands, see [Installing Kubernetes with Minikube](https://minikube.sigs.k8s.io/docs/start/).\n","type":"Mdx","contentDigest":"ee43604fd813f9397ad1caed041fe627","owner":"gatsby-plugin-mdx","counter":232},"frontmatter":{"title":"Minikube","description":"Minikube","tabs":["Kubernetes Overview","Minikube","AKS","EKS"]},"exports":{},"rawBody":"---\ntitle: Minikube\ndescription: Minikube\ntabs: ['Kubernetes Overview','Minikube','AKS','EKS']\n---\n\nMinikube runs a single-node Kubernetes cluster inside a virtual machine (VM) on your laptop, for users who want to try out Kubernetes or develop with it.\nMinikube documentation is available at [Installing Kubernetes with Minikube](https://minikube.sigs.k8s.io/docs/start/).\nThe following sections are not a substitute for the official documentation but they get you started in a classic configuration.\n\nThe following installation steps are described:\n\n* Installing Minikube\n* Starting Minikube\n* Setting up the Docker® registry\n* Configuring the hosts file for Minikube\n* Enabling Helm for Minikube\n* A summary of some useful Minikube commands\n\n## Minikube installation\n\nMinikube installation steps are described in the official documentation for your preferred Operating System: [Install Minikube](https://minikube.sigs.k8s.io/docs/start/).\n\n## Starting Minikube\n\nMinikube can be started with a command as simple as `minikube start` without any additional parameters. However, the resulting VM will be too small to deploy an instance of Cúram,\nso several other parameters are required as described in the following sections.\n\n### Specifying the resource allocation\n\nYou can add properties to specify the resource allocation. For example:\n\n* `--cpus 4` to use 4 CPUs\n* `--memory 8G` to use 8 GB of RAM\n* `--disk-size=30G` to use 30 GB of disk space\n\n### Specifying the VM driver\n\nAdd the `--driver=` option to the `minikube start` command to specify the underlying virtual machine driver. The following drivers were tested:\n\n* [VirtualBox](https://minikube.sigs.k8s.io/docs/drivers/virtualbox/) (`virtualbox`) on OSX and Linux\n* [VMware Fusion](https://minikube.sigs.k8s.io/docs/drivers/vmware/) (`vmware`) on OSX\n  * **Note**: There is an [issue](https://github.com/kubernetes/minikube/issues/9720) running Minikube on macOS Big Sur with VMware Fusion 12. If you are using Big Sur, use an alternative driver.\n* [Docker](https://minikube.sigs.k8s.io/docs/drivers/kvm2/) (`docker`) on Linux\n* [KVM](https://minikube.sigs.k8s.io/docs/drivers/kvm2/) (`kvm2`) on Linux\n* [Hyperv](https://minikube.sigs.k8s.io/docs/drivers/hyperv/) (`hyperv`) on Windows\n\nThe [Install Minikube](https://minikube.sigs.k8s.io/docs/start/) page gives you more information on available VM driver options.\n\n### Specifying the insecure registry\n\nYou must specify the `--insecure-registry` option to reference the Docker registry that is created. The `--insecure-registry` value is the same as specified in the  `daemon.json` file.\n\n<InlineNotification>\n\n**Note:** Because of a limitation in the current version of Minikube, adding the `--insecure-registry` option works on a new Minikube instance only.\nIf you start Minikube, be sure to run `minikube stop` and `minikube delete` before you start it again with the `--insecure-registry` option.\n\n</InlineNotification>\n\nFor Windows see the [Minikube handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#enabling-insecure-registries) for information regarding the `--insecure-registry \"10.0.0.0/24`\" setting on the `minikube start` command.\n\n### Specifying the Kubernetes version\n\nYou can override the version of Kubernetes that gets installed inside the Minikube VM by using the `--kubernetes-version` flag. This flag controls the compatibility between the client tools and the Kubernetes specification.\n\nIf you override the Kubernetes version, ensure that you download and install the corresponding version of `kubectl` - this version must be the same version as the Kubernetes cluster.\n\n<InlineNotification>\n\n**Note:** The `kubectl` version running locally and on Minikube should be compatible, so it's possible to use the `--kubernetes-version` flag to keep them consistent.\n\n</InlineNotification>\n\n### Minikube start command\n\n<InlineNotification kind=\"info\">\n\n**Note:** In the following example for Mac and Linux we set the `--insecure-registry` option passing in a subnet of `192.168.0.0/16`.\nThe IP address on your machine _may_ not be on the appropriate network for this subnet to work.\nTherefore, start a Minikube instance to verify the IP address begins with 192.168.0.X. You need only do this once.\nSee the note in [Specifying the insecure registry](#specifying-the-insecure-registry).\n\n</InlineNotification>\n\nExample `minikube start` commands based on the recommended settings above:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nminikube start --driver=virtualbox --cpus 4 --memory 8G \\\n               --insecure-registry \"192.168.0.0/16\" \\\n               --disk-size='30G' \\\n               --kubernetes-version v1.20.11\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nminikube start --vm-driver=hyperv --cpus 4 --memory 8G `\n              --insecure-registry \"10.0.0.0/24\" `\n              --disk-size='30G' `\n              --kubernetes-version v1.20.11\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n### Using Docker inside the Minikube VM\n\nYou can use the Docker installed in your local environment or, optionally, the Docker inside the Minikube VM.\n\nThe command to use the Docker inside of the Minikube VM is:\n\n```shell\nminikube docker-env\n```\n\nThe output of that command will instruct you how to run the command for your particular shell as illustrated:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\neval $(minikube -p minikube docker-env)\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n& minikube -p minikube docker-env | Invoke-Expression\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nThen `docker` commands will operate against the Minikube VM's docker, allowing, for example, the likes of `docker run` for chartmuseum and the `docker build` commands to work.\nDon't forget that if you are using multiple shells you must run the `minikube docker-env` command in each shell.\n\n## Docker Hub download rate limit and Minikube\n\nIn November 2020, Docker introduced [download rate limits](https://docs.docker.com/docker-hub/download-rate-limit/) on Docker Hub.\nNormally, this can be mitigated by providing an Image Pull Secret to the deployment.\n\nFor Minikube addons these pull secrets are not exposed, so the solution involves providing a `config.json` file containing the credentials to the Kubelet process running inside the Minikube environment.\n\n1. Authenticate your local Docker client with Docker Hub: `docker login`\n    * You can register for a free account on the [Docker Hub website](https://hub.docker.com/signup)\n2. Copy the contents of your local Docker secrets:\n\n    ```shell\n    cat ~/.docker/config.json && echo\n    ```\n\n    * The output should look something like below:\n\n    ```json\n    {\n      \"auths\": {\n        \"https://index.docker.io/v1/\": {\n          \"auth\": \"<base64 of username:password>\"\n        }\n      }\n    }\n    ```\n\n3. Open a terminal in your Minikube VM:\n\n    ```shell\n    minikube ssh\n    ```\n\n4. Paste the contents of the file from step 2 into `/var/lib/kubelet/config.json`:\n\n    * Edit the command to include the contents of your `config.json` file first\n\n    ```shell\n    cat << EOS | sudo tee /var/lib/kubelet/config.json\n    {\n      \"auths\": {\n        \"https://index.docker.io/v1/\": {\n          \"auth\": \"<base64 of username:password>\"\n        }\n      }\n    }\n    EOS\n    ```\n\n5. Restart the `kubelet` process in the Minikube VM:\n\n    ```shell\n    sudo systemctl restart kubelet\n    ```\n\n6. Exit the Minikube terminal.\n\n## Docker registry\n\nYou need a registry to use docker images with Helm in Minikube.\nThere are different types of registries that can be used. However, this page describes a simple registry option that doesn't require extra components.\n\nMinikube provides an add-on to run a registry in a container. For more information, see [How to access the Docker registry within minikube](https://minikube.sigs.k8s.io/docs/tasks/docker_registry/).\n\nYou can use the following command to enable the add-on:\n\n```shell\nminikube addons enable registry\n```\n\nWhen enabled, starting Minikube starts two pods on the `kube-system` namespace, named `registry` and `registry-proxy`. Now the registry is active and can be used. The registry points to the Minikube IP address on port 5000.\n\nThe containers don't mount any volumes, so stopping Minikube deletes the registry content.\n\nFor Windows, you must follow the steps in the [Minikube Handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows) and set the value of the `DOCKER_REGISTRY` environment variable as follows:\n\n```powershell\n$env:DOCKER_REGISTRY = \"localhost:5000\"\n```\n\n### Using the insecure registry on Windows\n\nFor more information see the [Minikube handbook](https://minikube.sigs.k8s.io/docs/handbook/registry/#docker-on-windows).\n\nPerform these steps to use the insecure registry on Windows:\n\n* Confirm the registry service is running in minikube:\n  `kubectl get service --namespace kube-system`\n* Part one of making the registry port available:\n  `kubectl port-forward --namespace kube-system service/registry 5000:80`\n  Note: The port-forward sporadically times out/dies; so, you have to periodically check that it's running and renter it if needed.\n* Part two of making the registry port available:\n  `docker run -d --rm -it --network=host alpine ash -c \"apk add socat && socat TCP-LISTEN:5000,reuseaddr,fork TCP:host.docker.internal:5000\"`\n* Test the registry:\n  `curl http://localhost:5000/v2/_catalog`\n  This first time it will be empty: `{\"repositories\":[]}`\n  Running the same `curl` command inside Minikube via `minikube ssh` is also a good check.\n\n## Hostname configuration for Minikube\n\nThis runbook uses a generic hostname of `minikube.local` as an example in commands and the configuration files.\nYou should add the Minikube IP address to the `hosts` file by using the generic hostname, or else modify the usage of `minikube.local` in this runbook to reflect your local hostname.\n\nSpecifying `minikube ip` in the following command returns the Minikube VM's IP address that is accessible from your workstation:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\necho -e \"$(minikube ip)\\tminikube.local\" | sudo tee -a /etc/hosts\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nAdd-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value \"$(minikube ip)`tminikube.local\" -Force\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nIf not using the Docker inside of the Minikube VM [minikube docker-env](Using Docker inside the Minikube VM), the local Docker client configuration must be also be updated with the corresponding IP address.\n\n* Update the `daemon.json` docker configuration file with the Minikube IP address. This file is usually located in:\n  * `~/.docker/daemon.json` on OSX\n  * `/etc/docker/daemon.json` on Linux\n  * `C:\\ProgramData\\Docker\\config\\daemon.json` or `$env:USERPROFILE\\.docker\\daemon.json` on Windows, depending on your installation.\n* Restart the Docker daemon:\n  * On Linux - run: `sudo systemctl restart docker`\n  * On Mac and Windows - use the \"Restart Docker\" menu option in the Docker Desktop application.\n\nExample of `daemon.json`:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```json\n{\n  \"insecure-registries\": [\n    \"192.168.0.0/16\"\n  ]\n}\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows\">\n<Row>\n<Column>\n\n```json\n{\n  \"insecure-registries\": [\n    \"10.0.0.0/24\"\n  ],\n}\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** You can provide a specific IP address, or specify a subnet to future-proof the Docker client configuration.\n\n</InlineNotification>\n\nThe Minikube IP address might change when you run `minikube delete`. If it changes, you must repeat these steps.\n\nTherefore, reconfirm the Minikube IP and its setting in the `hosts` file every time you start Minikube, or after you run `minikube delete`.\n\n## Minikube Ingress\n\nIngress is a reverse proxy, which sits in front of the application that is deployed in Kubernetes. It facilitates use of a custom domain name to access a deployed application, instead of using service ports.\nTo enable Ingress for Minikube, you must enable the `ingress` add-on.\n\n```shell\nminikube addons enable ingress\n```\n\n## Create a namespace\n\nCreate a namespace for the Cúram deployment, again use an environment variable for your convenience when following the guide.\n\nCreate the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `-`, and must start and end with an alphanumeric character (e.g. `my-name`,  or `123-abc`):\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nexport PROJECT=\"dev\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n$env:PROJECT = \"dev\"\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nCreate the namespace:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nkubectl create namespace $PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nkubectl create namespace $env:PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nSwitch to the new namespace:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\nkubectl config set-context --current --namespace $PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\nkubectl config set-context --current --namespace $env:PROJECT\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Useful Minikube commands\n\nSome useful Minikube commands are as follows:\n\n```shell\n# Sample commands\nminikube status       # See if Minikube is running\nminikube start        # Create and start Minikube\nminikube dashboard    # Access the Kubernetes dashboard running within the Minikube cluster\nminikube ssh          # Login into the Minikube VM\nminikube addons list  # Show the status of the available add-ons\nminikube stop         # Stop Minikube\nminikube delete       # Delete the Minikube VM\nminikube ip           # Show the Minikube IP\n```\n\nFor a full list of commands, see [Installing Kubernetes with Minikube](https://minikube.sigs.k8s.io/docs/start/).\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/prereq/kubernetes/minikube.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}