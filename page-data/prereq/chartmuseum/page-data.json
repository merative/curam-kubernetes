{"componentChunkName":"component---src-pages-prereq-chartmuseum-mdx","path":"/prereq/chartmuseum/","result":{"pageContext":{"frontmatter":{"title":"ChartMuseum","description":"ChartMuseum"},"relativePagePath":"/prereq/chartmuseum.mdx","titleType":"page","MdxNode":{"id":"d29daa23-52b6-5621-96d9-925f02694f79","children":[],"parent":"dfc1940a-d9dc-5ed6-937d-bb0c06d8e3fc","internal":{"content":"---\ntitle: ChartMuseum\ndescription: ChartMuseum\n---\n\nHelm Charts are stored in a repository. For development purposes, you can use a local repository to use Helm along with Minikube. This runbook uses [ChartMuseum](https://github.com/helm/chartmuseum/) as the local repository.\n\nA Helm Chart is a collection of files that describe a related set of Kubernetes resources. Helm Charts are the recommended way to distribute deployments on Kubernetes clusters.\n\nUse ChartMuseum to develop, test, and deploy locally before you distribute the charts. For more information, see [Introduction to Helm](https://helm.sh/docs/intro/).\n\n## Installing ChartMuseum in a Docker® container\n\nChartMuseum can run in a Docker container by using the `docker run` command when the docker container is created.\n\nTake the following steps:\n\n* Start a Docker container that is accessible locally on port 8080:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -d --name chartmuseum \\\n  -p 8080:8080 \\\n  -e DEBUG=true \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/tmp/charts \\\n  chartmuseum/chartmuseum:v0.12.0\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm -d --name chartmuseum `\n  -p 8080:8080 `\n  -e DEBUG=true `\n  -e STORAGE=local `\n  -e STORAGE_LOCAL_ROOTDIR=/tmp/charts `\n  chartmuseum/chartmuseum:v0.12.0\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* Run the `docker logs` command to view the Chart Museum logs:\n\n```shell\ndocker logs chartmuseum\n```\n\n### Testing ChartMuseum connectivity\n\nRun the following command to test connectivity. `127.0.0.1` is the localhost IP address.\n\n<InlineNotification>\n\n**Note:** On Windows, the Docker Engine can run in a dedicated docker-machine, or can be reused from the Minikube VM.\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncurl http://127.0.0.1:8080/index.yaml\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n# Uncomment the appropriate command:\n\n# Use this command if using Docker locally:\n# Invoke-RestMethod http://127.0.0.1:8080/index.yaml\n\n# Use this command if using the Docker inside Minikube:\n# Invoke-RestMethod http://$(minikube ip):8080/index.yaml\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nYou will see something like the following example:\n\n```yaml\napiVersion: v1\nentries: {}\ngenerated: \"2019-06-17T10:55:37Z\"\nserverInfo: {}\n```\n\n## Provisioning charts\n\nWhen ChartMuseum is running, you can copy the compressed `tgz` files that are produced by Helm, or by using the [Helm Push](https://github.com/chartmuseum/helm-push) plugin (recommended approach).\n\n<InlineNotification>\n\n**Note:** On Windows, as per [this issue](https://github.com/chartmuseum/helm-push/issues/24), the Helm Push plugin must be installed from a Bash shell (e.g., Git Bash).\n\n</InlineNotification>\n\n```shell\nhelm plugin install https://github.com/chartmuseum/helm-push\n```\n\nCreating the chart files is covered later in the runbook when you run the `helm package` command. For more information, see [Preparing Helm Charts](/deployment/hc_preparation).\n\n## Configure Helm to access the local repository\n\nTo use ChartMuseum as a repository, you must configure Helm to point to it. Run the appropriate command:\n\n<Tabs>\n\n<Tab label=\"Local Docker\">\n<Row>\n<Column>\n\n```shell\nhelm repo add local-development http://127.0.0.1:8080/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"minikube VM Docker\">\n<Row>\n<Column>\n\n```shell\nhelm repo add local-development http://$(minikube ip):8080/\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nVerify the list of repositories by running the following command:\n\n```shell\nhelm repo list\n```\n\nThe helm repo list command also returns the `local-development` repository that you added when you ran the `helm repo add` command.\n\nWhen the repository is added, run the following command to refresh the Helm index:\n\n```shell\nhelm repo update\n```\n","type":"Mdx","contentDigest":"df228f3729b17d4e3e8d3cff2abf473d","owner":"gatsby-plugin-mdx","counter":188},"frontmatter":{"title":"ChartMuseum","description":"ChartMuseum"},"exports":{},"rawBody":"---\ntitle: ChartMuseum\ndescription: ChartMuseum\n---\n\nHelm Charts are stored in a repository. For development purposes, you can use a local repository to use Helm along with Minikube. This runbook uses [ChartMuseum](https://github.com/helm/chartmuseum/) as the local repository.\n\nA Helm Chart is a collection of files that describe a related set of Kubernetes resources. Helm Charts are the recommended way to distribute deployments on Kubernetes clusters.\n\nUse ChartMuseum to develop, test, and deploy locally before you distribute the charts. For more information, see [Introduction to Helm](https://helm.sh/docs/intro/).\n\n## Installing ChartMuseum in a Docker® container\n\nChartMuseum can run in a Docker container by using the `docker run` command when the docker container is created.\n\nTake the following steps:\n\n* Start a Docker container that is accessible locally on port 8080:\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ndocker run --rm -d --name chartmuseum \\\n  -p 8080:8080 \\\n  -e DEBUG=true \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/tmp/charts \\\n  chartmuseum/chartmuseum:v0.12.0\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\ndocker run --rm -d --name chartmuseum `\n  -p 8080:8080 `\n  -e DEBUG=true `\n  -e STORAGE=local `\n  -e STORAGE_LOCAL_ROOTDIR=/tmp/charts `\n  chartmuseum/chartmuseum:v0.12.0\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* Run the `docker logs` command to view the Chart Museum logs:\n\n```shell\ndocker logs chartmuseum\n```\n\n### Testing ChartMuseum connectivity\n\nRun the following command to test connectivity. `127.0.0.1` is the localhost IP address.\n\n<InlineNotification>\n\n**Note:** On Windows, the Docker Engine can run in a dedicated docker-machine, or can be reused from the Minikube VM.\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Mac/Linux\">\n<Row>\n<Column>\n\n```shell\ncurl http://127.0.0.1:8080/index.yaml\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Windows PS\">\n<Row>\n<Column>\n\n```powershell\n# Uncomment the appropriate command:\n\n# Use this command if using Docker locally:\n# Invoke-RestMethod http://127.0.0.1:8080/index.yaml\n\n# Use this command if using the Docker inside Minikube:\n# Invoke-RestMethod http://$(minikube ip):8080/index.yaml\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nYou will see something like the following example:\n\n```yaml\napiVersion: v1\nentries: {}\ngenerated: \"2019-06-17T10:55:37Z\"\nserverInfo: {}\n```\n\n## Provisioning charts\n\nWhen ChartMuseum is running, you can copy the compressed `tgz` files that are produced by Helm, or by using the [Helm Push](https://github.com/chartmuseum/helm-push) plugin (recommended approach).\n\n<InlineNotification>\n\n**Note:** On Windows, as per [this issue](https://github.com/chartmuseum/helm-push/issues/24), the Helm Push plugin must be installed from a Bash shell (e.g., Git Bash).\n\n</InlineNotification>\n\n```shell\nhelm plugin install https://github.com/chartmuseum/helm-push\n```\n\nCreating the chart files is covered later in the runbook when you run the `helm package` command. For more information, see [Preparing Helm Charts](/deployment/hc_preparation).\n\n## Configure Helm to access the local repository\n\nTo use ChartMuseum as a repository, you must configure Helm to point to it. Run the appropriate command:\n\n<Tabs>\n\n<Tab label=\"Local Docker\">\n<Row>\n<Column>\n\n```shell\nhelm repo add local-development http://127.0.0.1:8080/\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"minikube VM Docker\">\n<Row>\n<Column>\n\n```shell\nhelm repo add local-development http://$(minikube ip):8080/\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\nVerify the list of repositories by running the following command:\n\n```shell\nhelm repo list\n```\n\nThe helm repo list command also returns the `local-development` repository that you added when you ran the `helm repo add` command.\n\nWhen the repository is added, run the following command to refresh the Helm index:\n\n```shell\nhelm repo update\n```\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/prereq/chartmuseum.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}