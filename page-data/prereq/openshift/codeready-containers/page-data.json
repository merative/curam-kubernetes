{"componentChunkName":"component---src-pages-prereq-openshift-codeready-containers-mdx","path":"/prereq/openshift/codeready-containers/","result":{"pageContext":{"frontmatter":{"title":"CodeReady Containers","description":"CodeReady Containers","tabs":["OpenShift Overview","CodeReady Containers"]},"relativePagePath":"/prereq/openshift/codeready-containers.mdx","titleType":"page","MdxNode":{"id":"fa3d71bf-dc8d-5a05-af29-454cb6db621a","children":[],"parent":"8c2f40ff-ed26-5830-ac97-10ad31c9a95a","internal":{"content":"---\ntitle: CodeReady Containers\ndescription: CodeReady Containers\ntabs: ['OpenShift Overview','CodeReady Containers']\n---\n\n## What is CRC?\n\nCodeReady Containers (CRC) is a minimal, preconfigured OpenShift cluster that is designed to run on your local workstation as a development environment for OpenShift.\nFor more information, see [CodeReady Containers](https://github.com/crc-org/crc).\n\nSimilar to Minikube in concept, CRC provides a cloud like environment locally to create and deploy an OpenShift cluster for development and testing purposes.\n\nThis page covers some common CRC operations, including deploying Cúram to the CRC environment. You will use the Helm Charts produced in [Preparing Helm Charts](/deployment/hc_deployment).\n\nFor a full getting started guide for CRC, see [Getting Started Guide CodeReady Containers](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.23/html/getting_started_guide/index)\n\n### Minimum System requirements\n\nCodeReady Containers system requirements can be found here: [CRC Minimum system requirements](https://crc-org.github.io/crc/#minimum-system-requirements_gsg).\n\n<InlineNotification>\n\nThere is a known CRC [issue](https://github.com/crc-org/crc/issues/557) with respect to resource usage. When deploying Cúram on CRC our experience has shown that a minimum of 16GB will improve performance, however 32GB is optimal.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\nRed Hat CodeReady Containers only supports platform-native virtualization technologies:\n\n* HyperKit on macOS\n* libvirt on Linux\n\nRunning CRC using nested virtualization is discouraged and not supported.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\nThis Runbook does not support the use of CRC on Windows.\n\n</InlineNotification>\n\n## Installing CRC\n\n* Create an account at [RedHat Cloud](https://www.redhat.com/).\n* Create a `$CRC_HOME` folder (e.g. `~/crc_home`) to use for the purposes of the installation.\n* Download the installation archive from [latest release](https://cloud.redhat.com/openshift/install/crc/installer-provisioned) to `$CRC_HOME` and extract the archive:\n\n    ```shell\n    tar -xvf crc-*-amd64.tar.xz\n    ```\n\n* On the same page, download your pull secret to `$CRC_HOME`.\n* Copy the `crc` binary to `/usr/local/bin/`\n\n    ```shell\n    sudo cp $CRC_HOME/crc-*-amd64/crc /usr/local/bin/\n    ```\n\n<InlineNotification>\n\nAlternatively, you may add the extracted directory to the `$PATH` variable instead of moving the binary.\n\n</InlineNotification>\n\nWhichever option you choose, you should now have `crc` in your executable path. Verify by running the following command:\n\n```shell\ncrc version\n```\n\nThe output should be similar to the following:\n\n```shell\nCodeReady Containers version: 1.23.1+be17b141\nOpenShift version: 4.7.0 (embedded in executable)\n```\n\n## Setting up CRC\n\nThe first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure also creates the `~/.crc` directory if it does not already exist.\n\n```shell\ncrc setup\n```\n\nNow that the basic configuration is complete, you need to edit the configuration to change the memory limit and add the path to the pull secret file downloaded previously.\n\n<InlineNotification kind=\"warning\">\n\n**Note:** VPN clients can conflict with the network configuration for CodeReady Containers.\nIf you use a VPN client on the same environment as CRC, see the [VPN support](https://github.com/crc-org/crc/wiki/VPN-support--with-an--userland-network-stack) document in the CRC GitHub wiki.\n\n</InlineNotification>\n\nTo change the memory limit, set the CPUs, and add the path to the pull secret file downloaded previously. Run the following commands:\n\n```shell\ncrc config set memory <number-in-MiB>\ncrc config set cpus <whole-number>\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n```\n\n<InlineNotification>\n\nCRC's minimum memory allocation requirement is 8GB, only a single replica Cúram deployment can be achieved using this.\n\nYou should allocate as many resources as are available.\n\n**Note:** Values for available memory are set in mebibytes (MiB). Below are some sample values.\n\nExample memory values:\n\n* 32768 (MiB) is equilivant to 34.4GB\n* 20480 (MiB) is equilivant to 21.5GB\n* 15120 (MiB) is equilivant to 15.9GB\n\n**Note:** The greater the workload the greater the memory and processor requirements. Any changes to the CRC config require you to delete the cluster and start a new one.\n\n**Note:** CPU limits must not exceed the physical resources.\n\n</InlineNotification>\n\nYou can always check the configured options of `crc`, run the following command:\n\n```shell\ncrc config view\n```\n\nAfter setup is complete, start the cluster, run the following command:\n\n```shell\ncrc start\n```\n\nThis outputs something similar to the following:\n\n```log\nINFO Checking if running as non-root\nINFO Checking minimum RAM requirements\nINFO Checking if Virtualization is enabled\n...\n...\nStarted the OpenShift cluster.\n\nThe server is accessible via web console at:\n  https://console-openshift-console.apps-crc.testing\n\nLog in as administrator:\n  Username: kubeadmin\n  Password: kubeadmin-password\n\nLog in as user:\n  Username: developer\n  Password: developer\n\nUse the 'oc' command line interface:\n  $ eval $(crc oc-env)\n  $ oc login -u developer https://api.crc.testing:6443\n```\n\nNote the `kubeadmin` and `developer` credentials for later use.\n\n<InlineNotification>\n\nFor convenience, you may set the `kubeadmin` user's password as an environment variable:\n\n```shell\nexport KUBEADMN_PSW=kubeadmin-password\n```\n\nIn case you need to retrieve the password later, you can run `crc console --credentials`.\n\n</InlineNotification>\n\nNext, set up the OpenShift Client `oc`, which is used to administer the CRC cluster:\n\n```shell\neval $(crc oc-env)\n```\n\nIf required, you can stop the cluster:\n\n```shell\ncrc stop\n```\n\nOr delete the cluster:\n\n```shell\ncrc delete\n```\n\n## Creating a CRC project\n\nCreate a project for the Cúram deployment, again use an environment variable for your convenience when following the guide.\n\nCreate the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `-`, and must start and end with an alphanumeric character (e.g. `my-name`,  or `123-abc`):\n\n```shell\nexport PROJECT=\"ocp\"\n```\n\nLog in as kubeadmin:\n\n```shell\noc login -u kubeadmin -p $KUBEADMN_PSW https://api.crc.testing:6443\n```\n\nCreate the project:\n\n```shell\noc new-project $PROJECT\n```\n\n## Configuring the Image Registry\n\nCodeReady Containers comes with an internal image registry where you can store the application's Docker images.\n\nThe registry is accessed using different URLs, depending on the use - pods use an internal registry service name, and a developer would use the public route to publish the images.\n\nThe registry URLs can be retrieved using the `oc registry info` command, with either a `--public` or `--internal` flag.\n\n* Public URL: `default-route-openshift-image-registry.apps-crc.testing`\n  * Use this when tagging and publishing images.\n* Internal URL: `image-registry.openshift-image-registry.svc:5000`\n  * Use this when deploying using Helm.\n\nThe public URL uses a certificate signed by the OpenShift internal CA, which Docker does not trust by default.\n\nDocker loads all `*.crt` files under `/etc/docker/certs.d/<registryHost[:port]>` directories and uses them for verifying any self-signed certificates.\n\nMore information can be found in the Docker Documentation [Use self-signed certificates](https://docs.docker.com/registry/insecure/#use-self-signed-certificates).\n\nEnable Docker trust certificate:\n\n```shell\nCERT_PATH=\"/etc/docker/certs.d/$(oc registry info --public)\"\nsudo mkdir -p $CERT_PATH\noc extract secret/router-ca -n openshift-ingress-operator --keys=tls.crt --confirm\nsudo cp tls.crt $CERT_PATH\n```\n\nLog in to the OpenShift registry:\n\n```shell\ndocker login -u kubeadmin -p $(oc whoami -t) $(oc registry info --public)\n```\n\n## Hostname configuration for CRC\n\nThis runbook uses a generic hostname of `spm-ocp.apps-crc.testing` as an example in commands and the configuration files.\n\nYou should add the CRC IP address to the `hosts` file by using the generic hostname, or else modify the usage of `spm-ocp.apps-crc.testing` in this runbook to reflect your local hostname.\n\n```shell\necho -e \"$(crc ip)\\tspm-ocp.apps-crc.testing\" | sudo tee -a /etc/hosts\n```\n\nWhere `crc ip` is the command that returns the CRC VM's IP address that is accessible from your workstation.\n","type":"Mdx","contentDigest":"bf69dcea0c209e4430522d4478e135ba","owner":"gatsby-plugin-mdx","counter":237},"frontmatter":{"title":"CodeReady Containers","description":"CodeReady Containers","tabs":["OpenShift Overview","CodeReady Containers"]},"exports":{},"rawBody":"---\ntitle: CodeReady Containers\ndescription: CodeReady Containers\ntabs: ['OpenShift Overview','CodeReady Containers']\n---\n\n## What is CRC?\n\nCodeReady Containers (CRC) is a minimal, preconfigured OpenShift cluster that is designed to run on your local workstation as a development environment for OpenShift.\nFor more information, see [CodeReady Containers](https://github.com/crc-org/crc).\n\nSimilar to Minikube in concept, CRC provides a cloud like environment locally to create and deploy an OpenShift cluster for development and testing purposes.\n\nThis page covers some common CRC operations, including deploying Cúram to the CRC environment. You will use the Helm Charts produced in [Preparing Helm Charts](/deployment/hc_deployment).\n\nFor a full getting started guide for CRC, see [Getting Started Guide CodeReady Containers](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.23/html/getting_started_guide/index)\n\n### Minimum System requirements\n\nCodeReady Containers system requirements can be found here: [CRC Minimum system requirements](https://crc-org.github.io/crc/#minimum-system-requirements_gsg).\n\n<InlineNotification>\n\nThere is a known CRC [issue](https://github.com/crc-org/crc/issues/557) with respect to resource usage. When deploying Cúram on CRC our experience has shown that a minimum of 16GB will improve performance, however 32GB is optimal.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\nRed Hat CodeReady Containers only supports platform-native virtualization technologies:\n\n* HyperKit on macOS\n* libvirt on Linux\n\nRunning CRC using nested virtualization is discouraged and not supported.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\nThis Runbook does not support the use of CRC on Windows.\n\n</InlineNotification>\n\n## Installing CRC\n\n* Create an account at [RedHat Cloud](https://www.redhat.com/).\n* Create a `$CRC_HOME` folder (e.g. `~/crc_home`) to use for the purposes of the installation.\n* Download the installation archive from [latest release](https://cloud.redhat.com/openshift/install/crc/installer-provisioned) to `$CRC_HOME` and extract the archive:\n\n    ```shell\n    tar -xvf crc-*-amd64.tar.xz\n    ```\n\n* On the same page, download your pull secret to `$CRC_HOME`.\n* Copy the `crc` binary to `/usr/local/bin/`\n\n    ```shell\n    sudo cp $CRC_HOME/crc-*-amd64/crc /usr/local/bin/\n    ```\n\n<InlineNotification>\n\nAlternatively, you may add the extracted directory to the `$PATH` variable instead of moving the binary.\n\n</InlineNotification>\n\nWhichever option you choose, you should now have `crc` in your executable path. Verify by running the following command:\n\n```shell\ncrc version\n```\n\nThe output should be similar to the following:\n\n```shell\nCodeReady Containers version: 1.23.1+be17b141\nOpenShift version: 4.7.0 (embedded in executable)\n```\n\n## Setting up CRC\n\nThe first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure also creates the `~/.crc` directory if it does not already exist.\n\n```shell\ncrc setup\n```\n\nNow that the basic configuration is complete, you need to edit the configuration to change the memory limit and add the path to the pull secret file downloaded previously.\n\n<InlineNotification kind=\"warning\">\n\n**Note:** VPN clients can conflict with the network configuration for CodeReady Containers.\nIf you use a VPN client on the same environment as CRC, see the [VPN support](https://github.com/crc-org/crc/wiki/VPN-support--with-an--userland-network-stack) document in the CRC GitHub wiki.\n\n</InlineNotification>\n\nTo change the memory limit, set the CPUs, and add the path to the pull secret file downloaded previously. Run the following commands:\n\n```shell\ncrc config set memory <number-in-MiB>\ncrc config set cpus <whole-number>\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n```\n\n<InlineNotification>\n\nCRC's minimum memory allocation requirement is 8GB, only a single replica Cúram deployment can be achieved using this.\n\nYou should allocate as many resources as are available.\n\n**Note:** Values for available memory are set in mebibytes (MiB). Below are some sample values.\n\nExample memory values:\n\n* 32768 (MiB) is equilivant to 34.4GB\n* 20480 (MiB) is equilivant to 21.5GB\n* 15120 (MiB) is equilivant to 15.9GB\n\n**Note:** The greater the workload the greater the memory and processor requirements. Any changes to the CRC config require you to delete the cluster and start a new one.\n\n**Note:** CPU limits must not exceed the physical resources.\n\n</InlineNotification>\n\nYou can always check the configured options of `crc`, run the following command:\n\n```shell\ncrc config view\n```\n\nAfter setup is complete, start the cluster, run the following command:\n\n```shell\ncrc start\n```\n\nThis outputs something similar to the following:\n\n```log\nINFO Checking if running as non-root\nINFO Checking minimum RAM requirements\nINFO Checking if Virtualization is enabled\n...\n...\nStarted the OpenShift cluster.\n\nThe server is accessible via web console at:\n  https://console-openshift-console.apps-crc.testing\n\nLog in as administrator:\n  Username: kubeadmin\n  Password: kubeadmin-password\n\nLog in as user:\n  Username: developer\n  Password: developer\n\nUse the 'oc' command line interface:\n  $ eval $(crc oc-env)\n  $ oc login -u developer https://api.crc.testing:6443\n```\n\nNote the `kubeadmin` and `developer` credentials for later use.\n\n<InlineNotification>\n\nFor convenience, you may set the `kubeadmin` user's password as an environment variable:\n\n```shell\nexport KUBEADMN_PSW=kubeadmin-password\n```\n\nIn case you need to retrieve the password later, you can run `crc console --credentials`.\n\n</InlineNotification>\n\nNext, set up the OpenShift Client `oc`, which is used to administer the CRC cluster:\n\n```shell\neval $(crc oc-env)\n```\n\nIf required, you can stop the cluster:\n\n```shell\ncrc stop\n```\n\nOr delete the cluster:\n\n```shell\ncrc delete\n```\n\n## Creating a CRC project\n\nCreate a project for the Cúram deployment, again use an environment variable for your convenience when following the guide.\n\nCreate the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `-`, and must start and end with an alphanumeric character (e.g. `my-name`,  or `123-abc`):\n\n```shell\nexport PROJECT=\"ocp\"\n```\n\nLog in as kubeadmin:\n\n```shell\noc login -u kubeadmin -p $KUBEADMN_PSW https://api.crc.testing:6443\n```\n\nCreate the project:\n\n```shell\noc new-project $PROJECT\n```\n\n## Configuring the Image Registry\n\nCodeReady Containers comes with an internal image registry where you can store the application's Docker images.\n\nThe registry is accessed using different URLs, depending on the use - pods use an internal registry service name, and a developer would use the public route to publish the images.\n\nThe registry URLs can be retrieved using the `oc registry info` command, with either a `--public` or `--internal` flag.\n\n* Public URL: `default-route-openshift-image-registry.apps-crc.testing`\n  * Use this when tagging and publishing images.\n* Internal URL: `image-registry.openshift-image-registry.svc:5000`\n  * Use this when deploying using Helm.\n\nThe public URL uses a certificate signed by the OpenShift internal CA, which Docker does not trust by default.\n\nDocker loads all `*.crt` files under `/etc/docker/certs.d/<registryHost[:port]>` directories and uses them for verifying any self-signed certificates.\n\nMore information can be found in the Docker Documentation [Use self-signed certificates](https://docs.docker.com/registry/insecure/#use-self-signed-certificates).\n\nEnable Docker trust certificate:\n\n```shell\nCERT_PATH=\"/etc/docker/certs.d/$(oc registry info --public)\"\nsudo mkdir -p $CERT_PATH\noc extract secret/router-ca -n openshift-ingress-operator --keys=tls.crt --confirm\nsudo cp tls.crt $CERT_PATH\n```\n\nLog in to the OpenShift registry:\n\n```shell\ndocker login -u kubeadmin -p $(oc whoami -t) $(oc registry info --public)\n```\n\n## Hostname configuration for CRC\n\nThis runbook uses a generic hostname of `spm-ocp.apps-crc.testing` as an example in commands and the configuration files.\n\nYou should add the CRC IP address to the `hosts` file by using the generic hostname, or else modify the usage of `spm-ocp.apps-crc.testing` in this runbook to reflect your local hostname.\n\n```shell\necho -e \"$(crc ip)\\tspm-ocp.apps-crc.testing\" | sudo tee -a /etc/hosts\n```\n\nWhere `crc ip` is the command that returns the CRC VM's IP address that is accessible from your workstation.\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/prereq/openshift/codeready-containers.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}