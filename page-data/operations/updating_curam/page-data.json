{"componentChunkName":"component---src-pages-operations-updating-curam-mdx","path":"/operations/updating_curam/","result":{"pageContext":{"frontmatter":{"title":"Updating Cúram deployment","description":"Updating Cúram deployment"},"relativePagePath":"/operations/updating_curam.mdx","titleType":"page","MdxNode":{"id":"1babc4ce-5590-5320-84cb-9bf171cca460","children":[],"parent":"8c3b6ed6-3ddd-526b-955a-b20d1521d3f7","internal":{"content":"---\ntitle: Updating Cúram deployment\ndescription: Updating Cúram deployment\n---\n\nOne of the benefits of Cúram on Kubernetes is the reduced time required to roll out a new version of your application from development all the way to production.\n\nDepending on the type of change that needs to be made, there are multiple options for rolling out the change. The different options are visualized in figure 1.\n\n![Upgrade Flow](../../images/upgrade_flow.png)\n<Caption>\n\n*Figure 1:* Upgrade process flow\n\n</Caption>\n\nAll the application images should be built by a continuous integration environment, tagged appropriately (e.g. combination of product version and a timestamp), and then promoted throughout all the phases.\n\nUpdates can be applied using 2 ways: Helm values, or by editing the deployed resources using `kubectl`.\n\n## Updating with `kubectl`\n\nYou can update a running application by using the following command to switch out an image, Kubernetes takes care of everything else.\nA new pod with the new image is started up, and when it reports as 'Ready', it takes over serving traffic.\n\n```bash\nkubectl set image deployment/<deploymentName> <containerName>=<newImage>:<newTag>\n```\n\nThis process is described in greater detail in [Updating a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment).\n\nFor example, the following command will issue an instruction to the Kubernetes Master to change the image used by the `apps-producer-rest` container of a deployment called `myRelease-apps-rest-producer` to `minikube.local:5000/rest:vNext`\n\n```bash\nkubectl set image deployment/myRelease-apps-rest-producer apps-producer-rest=minikube.local:5000/rest:vNext\n```\n\nThe status of this change can be monitored using `kubectl get pods --watch` or `kubectl rollout status deployment/myRelease-apps-rest-producer`\n\nIf the rollout is not successful (for example, because of a typo), the last update can be rolled back:\n\n```bash\nkubectl rollout undo deployment/<deploymentName>\n```\n\nThis is convenient when only a single image needs to be updated, and the changes do not require any database changes (for example, the Universal Access React application would be a good candidate).\nHowever, bulk updates of images or configuration should be handled with Helm.\n\n## Rolling out updates with Helm\n\nAn update using Helm can include configuration changes, as well as a change of Docker® images. Assuming that all images are tagged with the same tag, the upgrade command would look like the following example:\n\n```bash\nhelm upgrade <releasename> <chartName> --reuse-values --set images.tag=vNext\n```\n\nThe `helm upgrade` command keeps all the values used with the original `helm install` due to the `--reuse-values` flag, and only changes the `images.tag` value, so all new images are deployed with the `vNext` tag.\n\nLike `kubectl`, if you must reverse any configuration changes applied by the last action, use `helm rollback <releasename>`.\n\nThe full documentation of the `helm upgrade` command is available on the Helm [Updating a Deployment](https://helm.sh/docs/helm/helm_upgrade/) page.\n\n## Upgrade with SQL changes\n\nBoth of the scenarios described assume a no-impact, zero-downtime upgrade, that is no changes to the database are required.\nHowever, should the rollout include schema changes, the application must be halted. This must be coordinated together with your IT Operations and DBA teams.\n\nTo halt the application for the duration of the upgrade without deleting all Kubernetes objects, the application can be scaled down to 0 pods:\n\n```bash\nkubectl scale --replicas=0 deployment/<deploymentName>\n```\n\nAfter the database upgrade is completed, the new version of application code can be rolled out using the Helm method described in\n[Rolling out updates with Helm](#rolling-out-updates-with-helm).\n\n<InlineNotification>\n\n**Note:** The `kubectl scale` command can be used to horizontally [scale your application](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment).\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"6a9c04b4bced1519b23ab71798dc7722","owner":"gatsby-plugin-mdx","counter":185},"frontmatter":{"title":"Updating Cúram deployment","description":"Updating Cúram deployment"},"exports":{},"rawBody":"---\ntitle: Updating Cúram deployment\ndescription: Updating Cúram deployment\n---\n\nOne of the benefits of Cúram on Kubernetes is the reduced time required to roll out a new version of your application from development all the way to production.\n\nDepending on the type of change that needs to be made, there are multiple options for rolling out the change. The different options are visualized in figure 1.\n\n![Upgrade Flow](../../images/upgrade_flow.png)\n<Caption>\n\n*Figure 1:* Upgrade process flow\n\n</Caption>\n\nAll the application images should be built by a continuous integration environment, tagged appropriately (e.g. combination of product version and a timestamp), and then promoted throughout all the phases.\n\nUpdates can be applied using 2 ways: Helm values, or by editing the deployed resources using `kubectl`.\n\n## Updating with `kubectl`\n\nYou can update a running application by using the following command to switch out an image, Kubernetes takes care of everything else.\nA new pod with the new image is started up, and when it reports as 'Ready', it takes over serving traffic.\n\n```bash\nkubectl set image deployment/<deploymentName> <containerName>=<newImage>:<newTag>\n```\n\nThis process is described in greater detail in [Updating a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment).\n\nFor example, the following command will issue an instruction to the Kubernetes Master to change the image used by the `apps-producer-rest` container of a deployment called `myRelease-apps-rest-producer` to `minikube.local:5000/rest:vNext`\n\n```bash\nkubectl set image deployment/myRelease-apps-rest-producer apps-producer-rest=minikube.local:5000/rest:vNext\n```\n\nThe status of this change can be monitored using `kubectl get pods --watch` or `kubectl rollout status deployment/myRelease-apps-rest-producer`\n\nIf the rollout is not successful (for example, because of a typo), the last update can be rolled back:\n\n```bash\nkubectl rollout undo deployment/<deploymentName>\n```\n\nThis is convenient when only a single image needs to be updated, and the changes do not require any database changes (for example, the Universal Access React application would be a good candidate).\nHowever, bulk updates of images or configuration should be handled with Helm.\n\n## Rolling out updates with Helm\n\nAn update using Helm can include configuration changes, as well as a change of Docker® images. Assuming that all images are tagged with the same tag, the upgrade command would look like the following example:\n\n```bash\nhelm upgrade <releasename> <chartName> --reuse-values --set images.tag=vNext\n```\n\nThe `helm upgrade` command keeps all the values used with the original `helm install` due to the `--reuse-values` flag, and only changes the `images.tag` value, so all new images are deployed with the `vNext` tag.\n\nLike `kubectl`, if you must reverse any configuration changes applied by the last action, use `helm rollback <releasename>`.\n\nThe full documentation of the `helm upgrade` command is available on the Helm [Updating a Deployment](https://helm.sh/docs/helm/helm_upgrade/) page.\n\n## Upgrade with SQL changes\n\nBoth of the scenarios described assume a no-impact, zero-downtime upgrade, that is no changes to the database are required.\nHowever, should the rollout include schema changes, the application must be halted. This must be coordinated together with your IT Operations and DBA teams.\n\nTo halt the application for the duration of the upgrade without deleting all Kubernetes objects, the application can be scaled down to 0 pods:\n\n```bash\nkubectl scale --replicas=0 deployment/<deploymentName>\n```\n\nAfter the database upgrade is completed, the new version of application code can be rolled out using the Helm method described in\n[Rolling out updates with Helm](#rolling-out-updates-with-helm).\n\n<InlineNotification>\n\n**Note:** The `kubectl scale` command can be used to horizontally [scale your application](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment).\n\n</InlineNotification>\n","fileAbsolutePath":"/home/runner/work/curam-kubernetes/curam-kubernetes/src/pages/operations/updating_curam.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","56986546","768070550"]}