{{- include "sch.config.init" (list . "mqserver.sch.chart.config.values") -}}
{{- if (.Capabilities.APIVersions.Has "mq.ibm.com/v1beta1") }}
{{ $apps := .Values.global.apps.config }}
{{- range $name, $app := $apps }}
{{- if and ($app.enabled) (not (hasKey $app "mqConnectionNameList")) }}
{{- $tuningParams := $app.mqTuning }}
---
###############################################################################
# Â© Merative US L.P. 2022,2025
# Copyright 2019,2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

apiVersion: mq.ibm.com/v1beta1
kind: QueueManager
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $name) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "mqserver.labels" $ | nindent 4 }}
    app: {{ $name }}-{{ include "sch.names.appName" (list $) }}
    version: v{{ $.Release.Revision }}
spec:
  version: {{ $.Values.global.mq.version }}
  pki:
    keys:
      - name: ibmwebspheremq{{ $.Values.global.mq.queueManager.name | default "QM1" | lower }}
        secret:
          secretName: {{ $.Release.Name }}-mq-secret
          items:
          - tls.key
          - tls.crt
  license:
    accept: {{ eq (required "License must be accepted to use this operator (global.license)" $.Values.global.license) "accept" }}
    license: {{ $.Values.global.mq.license }}
    use: {{ $.Values.global.mq.use }}
  queueManager:
    name: {{ $.Values.global.mq.queueManager.name }}
    imagePullPolicy: {{ $.Values.global.pullPolicy }}
    mqsc:
      - configMap:
          name: {{ include "sch.names.fullCompName" (list $ "cm")  }}
          items:
          - config.mqsc
          - channel_{{$name}}.mqsc
    availability:
      type: {{ $.Values.global.mq.availabilityType }}
    livenessProbe:
      initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
      periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
      timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
      failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
    readinessProbe:
      initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
      periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
      timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
      failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
    storage:
      {{- if eq $.Values.global.mq.storageType "ephemeral" }}
      queueManager:
        type: 'ephemeral'
      recoveryLogs:
        type: 'ephemeral'
      persistedData:
        type: 'ephemeral'
      {{- else }}
      queueManager:
        type: 'persistent-claim'
        class: {{ $.Values.global.mq.storageClassName }}
        size: 2Gi
      recoveryLogs:
        type: 'persistent-claim'
        enabled: true
        class: {{ $.Values.global.mq.storageClassName }}
        size: 2Gi
      persistedData:
        type: 'persistent-claim'
        enabled: true
        class: {{ $.Values.global.mq.storageClassName }}
        size: 2Gi
      {{- end }}
    metrics:
      enabled: {{ $.Values.global.mq.metrics.enabled | default false }}
    route:
      enabled: false
    {{- if hasKey $tuningParams "resources" }}
    resources:
      {{- toYaml ($tuningParams.resources) | nindent 12 }}      
    {{- end }}
  securityContext:
    initVolumeAsRoot: {{ $.Values.global.mq.security.initVolumeAsRoot }}
    {{- if $.Values.global.mq.security.context.fsGroup }}
    fsGroup: {{ $.Values.global.mq.security.context.fsGroup }}
    {{- end }}
    supplementalGroups: {{ $.Values.global.mq.security.context.supplementalGroups }}
  web:
    enabled: {{ $.Values.global.mq.web.enabled }}
  template:
    pod:
      containers:
        - name: qmgr
          env:
            - name: MQSNOAUT
              value: 'yes'
            - name: MQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.adminPasswordKey }}
            - name: MQ_APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.appPasswordKey }}
{{- end }}
{{- end }}
{{- end }}
