{{- include "sch.config.init" (list . "web.sch.chart.config.values") -}}
---
###############################################################################
# Â© Merative US L.P. 2022,2025
# Copyright 2019,2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullName" (list .) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "sch.metadata.labels.standard" (list . "") | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "sch.metadata.labels.standard" (list . "") | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "sch.metadata.labels.standard" (list . "") | nindent 8 }}
        app: {{ include "sch.names.appName" (list .) }}
        version: v{{ .Release.Revision }}
      annotations:
        {{- include "sch.metadata.annotations.metering" (list $ $.sch.chart.metering) | nindent 8 }}
        {{- with $.Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}        
    spec:
      {{- include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | nindent 6 }}
      affinity:
        {{- include "sch.affinity.nodeAffinity" (list . .sch.chart.nodeAffinity) | nindent 8 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - web
              topologyKey: topology.kubernetes.io/zone
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - web
              topologyKey: kubernetes.io/hostname
      {{- if or .Values.global.imagePullSecret.secretName .Values.global.imagePullSecret.username }}
      imagePullSecrets:
        - name: {{ default (printf "%s-pull-secret" .Release.Name) .Values.global.imagePullSecret.secretName }}
      {{- end }}
      restartPolicy: Always
      serviceAccountName: {{ default (include "sch.names.fullName" (list .)) .Values.serviceAccountName }}
      volumes:
        {{- if .Values.httpMetricsEnabled }}
        - name: httpd-conf-cm-vol
          configMap:
            name: {{ include "sch.names.fullCompName" (list . "serverstatus-conf") }}
            items:
            - key: serverstatus.conf
              path: serverstatus.conf
        {{- end }}
        - name: service-certs
          secret:
            secretName: {{ include "sch.names.fullName" (list .) }}
        - name: conf-d
          configMap:
            name: {{ include "sch.names.fullCompName" (list . "conf") }}
        - name: init-scripts
          configMap:
            name: {{ include "sch.names.fullCompName" (list . "scripts") }}
        {{- if .Values.global.apps.common.persistence.enabled }}
        - name: {{ .Release.Name }}-persistence-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-persistence-pvc
        {{- end }}
      containers:
        {{- if .Values.httpMetricsEnabled }}
        - name: httpd-exporter
          image: bitnami/apache-exporter
          ports:
            - name: podmonitorport
              containerPort: 9117
          args: ["--scrape_uri=http://localhost:8080/server-status/?auto"]
          {{- include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | nindent 10 }}
          livenessProbe:
            tcpSocket:
              port: podmonitorport
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- if .Values.readinessProbe.path }}
          readinessProbe:
            httpGet:
              path: /metrics
              port: podmonitorport
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        - name: {{ .Chart.Name }}
          image: {{ include "web.imageFullName" . }}
          imagePullPolicy: {{ .Values.global.images.pullPolicy }}
          env:
            - name: TZ
              value: {{ .Values.global.timezone }}
          ports:
            - name: client
              containerPort: 8443
              protocol: TCP
          {{- include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | nindent 10 }}
          livenessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- if .Values.readinessProbe.path }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: client
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.httpMetricsEnabled }}
            - name: httpd-conf-cm-vol
              mountPath: /etc/httpd/conf.d/serverstatus.conf
              subPath: serverstatus.conf
            {{- end }}
            - name: service-certs
              mountPath: /opt/app-root/httpd-ssl/private/tls.pem
              subPath: tls.key
            - name: service-certs
              mountPath: /opt/app-root/httpd-ssl/certs/tls.pem
              subPath: tls.crt
            {{- range $confFile := (list "70-logging.conf" "80-staticContent.conf" "90-tuning.conf") }}
            - name: conf-d
              mountPath: /etc/httpd/conf.d/{{ $confFile }}
              subPath: {{ $confFile }}
            {{- end }}
            {{- range $shellFile := (list "10-logging.sh" "20-rewriteRules.sh" "20-rewriteRules.conf") }}
            - name: init-scripts
              mountPath: /opt/app-root/src/httpd-pre-init/{{ $shellFile }}
              subPath: {{ $shellFile }}
            {{- end }}
            {{- if .Values.global.apps.common.persistence.enabled }}
            - name: {{ .Release.Name }}-persistence-volume
              mountPath: {{ include "persistence.mountPoint" . }}
            {{- end }}
